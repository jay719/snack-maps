"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const recorder_1 = __importDefault(require("./recorder"));
class Videos {
    constructor(browserJobs, { videoPath, videoOptions, videoEncodingOptions }, warningLog, timeStamp) {
        const options = Object.assign({ timeStamp: timeStamp }, videoOptions);
        this.testVideoInfos = {};
        browserJobs.forEach(browserJob => {
            const recorder = this._createVideoRecorder(browserJob, videoPath, options, videoEncodingOptions, warningLog);
            recorder.on('test-run-video-saved', args => this._addTestRunVideoInfo(args));
        });
    }
    getTestVideos(testId) {
        const testVideoInfo = this.testVideoInfos[testId];
        return testVideoInfo ? testVideoInfo.recordings : [];
    }
    _createVideoRecorder(browserJob, videoPath, options, videoEncodingOptions, warningLog) {
        return new recorder_1.default(browserJob, videoPath, options, videoEncodingOptions, warningLog);
    }
    _addTestRunVideoInfo({ testRun, videoPath, singleFile }) {
        const testId = testRun.test.id;
        let testVideo = this.testVideoInfos[testId];
        if (!testVideo) {
            testVideo = { recordings: [] };
            this.testVideoInfos[testId] = testVideo;
        }
        testVideo.recordings.push({
            testRunId: testRun.id,
            videoPath,
            singleFile
        });
    }
}
exports.default = Videos;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlkZW9zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3ZpZGVvLXJlY29yZGVyL3ZpZGVvcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDBEQUF1QztBQWF2QyxNQUFxQixNQUFNO0lBR3ZCLFlBQ0ksV0FBeUIsRUFBRSxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsb0JBQW9CLEVBQWdCLEVBQUUsVUFBc0IsRUFBRSxTQUF3QjtRQUM1SSxNQUFNLE9BQU8sbUJBQUssU0FBUyxFQUFFLFNBQVMsSUFBSyxZQUFZLENBQUUsQ0FBQztRQUUxRCxJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztRQUV6QixXQUFXLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQzdCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUU3RyxRQUFRLENBQUMsRUFBRSxDQUFDLHNCQUFzQixFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDakYsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU0sYUFBYSxDQUFFLE1BQWM7UUFDaEMsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVsRCxPQUFPLGFBQWEsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ3pELENBQUM7SUFFTyxvQkFBb0IsQ0FBRSxVQUFtQixFQUFFLFNBQWlCLEVBQUUsT0FBZ0IsRUFBRSxvQkFBNkIsRUFBRSxVQUFzQjtRQUN6SSxPQUFPLElBQUksa0JBQWEsQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUMvRixDQUFDO0lBRU8sb0JBQW9CLENBQUUsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBOEI7UUFDeEYsTUFBTSxNQUFNLEdBQW1CLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQy9DLElBQUksU0FBUyxHQUFrQixJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTNELElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDWixTQUFTLEdBQUcsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLENBQUM7WUFFL0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsR0FBRyxTQUFTLENBQUM7U0FDM0M7UUFFRCxTQUFTLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztZQUN0QixTQUFTLEVBQUUsT0FBTyxDQUFDLEVBQUU7WUFDckIsU0FBUztZQUNULFVBQVU7U0FDYixDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0o7QUExQ0QseUJBMENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZpZGVvUmVjb3JkZXIgZnJvbSAnLi9yZWNvcmRlcic7XG5pbXBvcnQgQnJvd3NlckpvYiBmcm9tICcuLi9ydW5uZXIvYnJvd3Nlci1qb2InO1xuaW1wb3J0IHsgRGljdGlvbmFyeSB9IGZyb20gJy4uL2NvbmZpZ3VyYXRpb24vaW50ZXJmYWNlcyc7XG5pbXBvcnQgV2FybmluZ0xvZyBmcm9tICcuLi9ub3RpZmljYXRpb25zL3dhcm5pbmctbG9nJztcbmltcG9ydCB7XG4gICAgVmlkZW9PcHRpb25zLFxuICAgIFRlc3RWaWRlb0luZm8sXG4gICAgVGVzdFJ1blZpZGVvSW5mbyxcbiAgICBUZXN0UnVuVmlkZW9TYXZlZEV2ZW50QXJnc1xufSBmcm9tICcuL2ludGVyZmFjZXMnO1xuXG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZpZGVvcyB7XG4gICAgcHVibGljIHRlc3RWaWRlb0luZm9zOiBEaWN0aW9uYXJ5PFRlc3RWaWRlb0luZm8+O1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yIChcbiAgICAgICAgYnJvd3NlckpvYnM6IEJyb3dzZXJKb2JbXSwgeyB2aWRlb1BhdGgsIHZpZGVvT3B0aW9ucywgdmlkZW9FbmNvZGluZ09wdGlvbnMgfTogVmlkZW9PcHRpb25zLCB3YXJuaW5nTG9nOiBXYXJuaW5nTG9nLCB0aW1lU3RhbXA6IG1vbWVudC5Nb21lbnQpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHsgdGltZVN0YW1wOiB0aW1lU3RhbXAsIC4uLnZpZGVvT3B0aW9ucyB9O1xuXG4gICAgICAgIHRoaXMudGVzdFZpZGVvSW5mb3MgPSB7fTtcblxuICAgICAgICBicm93c2VySm9icy5mb3JFYWNoKGJyb3dzZXJKb2IgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVjb3JkZXIgPSB0aGlzLl9jcmVhdGVWaWRlb1JlY29yZGVyKGJyb3dzZXJKb2IsIHZpZGVvUGF0aCwgb3B0aW9ucywgdmlkZW9FbmNvZGluZ09wdGlvbnMsIHdhcm5pbmdMb2cpO1xuXG4gICAgICAgICAgICByZWNvcmRlci5vbigndGVzdC1ydW4tdmlkZW8tc2F2ZWQnLCBhcmdzID0+IHRoaXMuX2FkZFRlc3RSdW5WaWRlb0luZm8oYXJncykpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VGVzdFZpZGVvcyAodGVzdElkOiBzdHJpbmcpOiBUZXN0UnVuVmlkZW9JbmZvW10ge1xuICAgICAgICBjb25zdCB0ZXN0VmlkZW9JbmZvID0gdGhpcy50ZXN0VmlkZW9JbmZvc1t0ZXN0SWRdO1xuXG4gICAgICAgIHJldHVybiB0ZXN0VmlkZW9JbmZvID8gdGVzdFZpZGVvSW5mby5yZWNvcmRpbmdzIDogW107XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfY3JlYXRlVmlkZW9SZWNvcmRlciAoYnJvd3NlckpvYjogdW5rbm93biwgdmlkZW9QYXRoOiBzdHJpbmcsIG9wdGlvbnM6IHVua25vd24sIHZpZGVvRW5jb2RpbmdPcHRpb25zOiB1bmtub3duLCB3YXJuaW5nTG9nOiBXYXJuaW5nTG9nKTogVmlkZW9SZWNvcmRlciB7XG4gICAgICAgIHJldHVybiBuZXcgVmlkZW9SZWNvcmRlcihicm93c2VySm9iLCB2aWRlb1BhdGgsIG9wdGlvbnMsIHZpZGVvRW5jb2RpbmdPcHRpb25zLCB3YXJuaW5nTG9nKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9hZGRUZXN0UnVuVmlkZW9JbmZvICh7IHRlc3RSdW4sIHZpZGVvUGF0aCwgc2luZ2xlRmlsZSB9OiBUZXN0UnVuVmlkZW9TYXZlZEV2ZW50QXJncyk6IHZvaWQge1xuICAgICAgICBjb25zdCB0ZXN0SWQ6IHN0cmluZyAgICAgICAgID0gdGVzdFJ1bi50ZXN0LmlkO1xuICAgICAgICBsZXQgdGVzdFZpZGVvOiBUZXN0VmlkZW9JbmZvID0gdGhpcy50ZXN0VmlkZW9JbmZvc1t0ZXN0SWRdO1xuXG4gICAgICAgIGlmICghdGVzdFZpZGVvKSB7XG4gICAgICAgICAgICB0ZXN0VmlkZW8gPSB7IHJlY29yZGluZ3M6IFtdIH07XG5cbiAgICAgICAgICAgIHRoaXMudGVzdFZpZGVvSW5mb3NbdGVzdElkXSA9IHRlc3RWaWRlbztcbiAgICAgICAgfVxuXG4gICAgICAgIHRlc3RWaWRlby5yZWNvcmRpbmdzLnB1c2goe1xuICAgICAgICAgICAgdGVzdFJ1bklkOiB0ZXN0UnVuLmlkLFxuICAgICAgICAgICAgdmlkZW9QYXRoLFxuICAgICAgICAgICAgc2luZ2xlRmlsZVxuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=