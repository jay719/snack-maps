"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const lodash_1 = require("lodash");
const os_family_1 = __importDefault(require("os-family"));
const api_based_1 = __importDefault(require("../../api-based"));
const compiler_1 = __importDefault(require("../es-next/compiler"));
const typescript_configuration_1 = __importDefault(require("../../../../configuration/typescript-configuration"));
const runtime_1 = require("../../../../errors/runtime");
const types_1 = require("../../../../errors/types");
const debug_1 = __importDefault(require("debug"));
const test_page_url_1 = require("../../../../api/test-page-url");
const exportble_lib_path_1 = __importDefault(require("../../exportble-lib-path"));
const DEBUG_LOGGER = debug_1.default('testcafe:compiler:typescript');
const RENAMED_DEPENDENCIES_MAP = new Map([['testcafe', exportble_lib_path_1.default]]);
const DEFAULT_TYPESCRIPT_COMPILER_PATH = 'typescript';
class TypeScriptTestFileCompiler extends api_based_1.default {
    constructor(compilerOptions) {
        super();
        // NOTE: At present, it's necessary create an instance TypeScriptTestFileCompiler
        // to collect a list of supported test file extensions.
        // So all compilers creates 2 times: first time - for collecting all supported file extensions,
        // second one - for compiling tests.
        // In future, need to rewrite 'getSupportedExtension' method as static.
        const configPath = compilerOptions && compilerOptions.configPath || null;
        this._customCompilerOptions = compilerOptions && compilerOptions.options;
        this._tsConfig = new typescript_configuration_1.default(configPath);
        this._compilerPath = TypeScriptTestFileCompiler._getCompilerPath(compilerOptions);
    }
    static _getCompilerPath(compilerOptions) {
        let compilerPath = compilerOptions && compilerOptions.customCompilerModulePath;
        if (!compilerPath || compilerPath === DEFAULT_TYPESCRIPT_COMPILER_PATH)
            return DEFAULT_TYPESCRIPT_COMPILER_PATH;
        // NOTE: if the relative path to custom TypeScript compiler module is specified
        // then we will resolve the path from the root of the 'testcafe' module
        if (test_page_url_1.isRelative(compilerPath)) {
            const testcafeRootFolder = path_1.default.resolve(__dirname, '../../../../../');
            compilerPath = path_1.default.resolve(testcafeRootFolder, compilerPath);
        }
        return compilerPath;
    }
    _loadTypeScriptCompiler() {
        try {
            return require(this._compilerPath);
        }
        catch (err) {
            throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.typeScriptCompilerLoadingError, err.message);
        }
    }
    static _normalizeFilename(filename) {
        filename = path_1.default.resolve(filename);
        if (os_family_1.default.win)
            filename = filename.toLowerCase();
        return filename;
    }
    static _getTSDefsPath() {
        return TypeScriptTestFileCompiler._normalizeFilename(path_1.default.resolve(__dirname, '../../../../../ts-defs/index.d.ts'));
    }
    _reportErrors(diagnostics) {
        // NOTE: lazy load the compiler
        const ts = this._loadTypeScriptCompiler();
        let errMsg = 'TypeScript compilation failed.\n';
        diagnostics.forEach(d => {
            const message = ts.flattenDiagnosticMessageText(d.messageText, '\n');
            const file = d.file;
            if (file && d.start !== void 0) {
                const { line, character } = file.getLineAndCharacterOfPosition(d.start);
                errMsg += `${file.fileName} (${line + 1}, ${character + 1}): `;
            }
            errMsg += `${message}\n`;
        });
        throw new Error(errMsg);
    }
    _compileCodeForTestFiles(testFilesInfo) {
        return this._tsConfig.init(this._customCompilerOptions)
            .then(() => {
            return super._compileCodeForTestFiles(testFilesInfo);
        });
    }
    _compileFilesToCache(ts, filenames) {
        const opts = this._tsConfig.getOptions();
        const program = ts.createProgram([TypeScriptTestFileCompiler.tsDefsPath, ...filenames], opts);
        DEBUG_LOGGER('version: %s', ts.version);
        DEBUG_LOGGER('options: %O', opts);
        program.getSourceFiles().forEach(sourceFile => {
            // @ts-ignore A hack to allow import globally installed TestCafe in tests
            sourceFile.renamedDependencies = RENAMED_DEPENDENCIES_MAP;
        });
        const diagnostics = ts.getPreEmitDiagnostics(program);
        if (diagnostics.length)
            this._reportErrors(diagnostics);
        // NOTE: The first argument of emit() is a source file to be compiled. If it's undefined, all files in
        // <program> will be compiled. <program> contains a file specified in createProgram() plus all its dependencies.
        // This mode is much faster than compiling files one-by-one, and it is used in the tsc CLI compiler.
        program.emit(void 0, (outputName, result, writeBOM, onError, sources) => {
            if (!sources)
                return;
            const sourcePath = TypeScriptTestFileCompiler._normalizeFilename(sources[0].fileName);
            this.cache[sourcePath] = result;
        });
    }
    _precompileCode(testFilesInfo) {
        DEBUG_LOGGER('path: "%s"', this._compilerPath);
        // NOTE: lazy load the compiler
        const ts = this._loadTypeScriptCompiler();
        const filenames = testFilesInfo.map(({ filename }) => filename);
        const normalizedFilenames = filenames.map(filename => TypeScriptTestFileCompiler._normalizeFilename(filename));
        const normalizedFilenamesMap = lodash_1.zipObject(normalizedFilenames, filenames);
        const uncachedFiles = normalizedFilenames
            .filter(filename => filename !== TypeScriptTestFileCompiler.tsDefsPath && !this.cache[filename])
            .map(filename => normalizedFilenamesMap[filename]);
        if (uncachedFiles.length)
            this._compileFilesToCache(ts, uncachedFiles);
        return normalizedFilenames.map(filename => this.cache[filename]);
    }
    _getRequireCompilers() {
        return {
            '.ts': (code, filename) => this._compileCode(code, filename),
            '.tsx': (code, filename) => this._compileCode(code, filename),
            '.js': (code, filename) => compiler_1.default.prototype._compileCode.call(this, code, filename),
            '.jsx': (code, filename) => compiler_1.default.prototype._compileCode.call(this, code, filename)
        };
    }
    get canPrecompile() {
        return true;
    }
    getSupportedExtension() {
        return ['.ts', '.tsx'];
    }
}
exports.default = TypeScriptTestFileCompiler;
TypeScriptTestFileCompiler.tsDefsPath = TypeScriptTestFileCompiler._getTSDefsPath();
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,