"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTestListFromCode = exports.getTestList = exports.EsNextTestFileParser = void 0;
const lodash_1 = require("lodash");
const core_1 = require("@babel/core");
const compiler_1 = __importDefault(require("./compiler"));
const test_file_parser_base_1 = require("../../test-file-parser-base");
const TOKEN_TYPE = {
    Identifier: 'Identifier',
    PropertyAccessExpression: 'MemberExpression',
    CallExpression: 'CallExpression',
    TaggedTemplateExpression: 'TaggedTemplateExpression',
    TemplateLiteral: 'TemplateLiteral',
    StringLiteral: 'StringLiteral',
    ArrowFunctionExpression: 'ArrowFunctionExpression',
    FunctionExpression: 'FunctionExpression',
    ExpressionStatement: 'ExpressionStatement',
    ReturnStatement: 'ReturnStatement',
    FunctionDeclaration: 'FunctionDeclaration',
    VariableStatement: 'VariableStatement',
    VariableDeclaration: 'VariableDeclaration',
    ObjectLiteralExpression: 'ObjectExpression'
};
class EsNextTestFileParser extends test_file_parser_base_1.TestFileParserBase {
    constructor() {
        super(TOKEN_TYPE);
    }
    static getTagStrValue(exp) {
        //NOTE: we set <computed name> if template literal has at least one computed substring ${...}
        return exp.expressions.length ? EsNextTestFileParser.formatComputedName(exp.loc.start.line) : exp.quasis[0].value.raw;
    }
    isAsyncFn(token) {
        return token.async || token.generator;
    }
    getTokenType(token) {
        return token.type;
    }
    getRValue(token) {
        return token.declarations[0].init;
    }
    getStringValue(token) {
        const stringTypes = [this.tokenType.StringLiteral, this.tokenType.TemplateLiteral, this.tokenType.Identifier];
        if (stringTypes.indexOf(token.type) > -1)
            return this.formatFnArg(token);
        return null;
    }
    getFunctionBody(token) {
        return token.body && token.body.body ? token.body.body : [];
    }
    getCalleeToken(token) {
        return token.callee;
    }
    getMemberFnName(token) {
        return token.callee.property.name;
    }
    formatFnData(name, value, token, meta = [{}]) {
        return {
            fnName: name,
            value: value,
            loc: token.loc,
            start: token.start,
            end: token.end,
            meta: lodash_1.merge({}, ...meta)
        };
    }
    getKeyValue(prop) {
        const { key, value } = prop;
        return {
            key: key.name || this.formatFnArg(key),
            value: this.getStringValue(value)
        };
    }
    analyzeMemberExp(token) {
        let exp = token;
        const tokenType = this.tokenType;
        const callStack = [exp];
        while (exp.type !== tokenType.Identifier) {
            if (exp.type === tokenType.CallExpression)
                exp = exp.callee;
            else if (exp.type === tokenType.PropertyAccessExpression)
                exp = exp.object;
            else if (exp.type === tokenType.TaggedTemplateExpression)
                exp = exp.tag;
            else
                return null;
            if (exp.type !== tokenType.Identifier)
                callStack.push(exp);
        }
        if (!this.isApiFn(exp.name))
            return null;
        const meta = this.getMetaInfo(callStack.slice());
        let parentExp = callStack.pop();
        if (parentExp.type === tokenType.CallExpression)
            return this.formatFnData(exp.name, this.formatFnArg(parentExp.arguments[0]), token, meta);
        if (parentExp.type === tokenType.TaggedTemplateExpression)
            return this.formatFnData(exp.name, EsNextTestFileParser.getTagStrValue(parentExp.quasi), token, meta);
        if (parentExp.type === tokenType.PropertyAccessExpression) {
            while (parentExp) {
                if (parentExp.type === tokenType.CallExpression && parentExp.callee) {
                    const calleeType = parentExp.callee.type;
                    const calleeMemberFn = parentExp.callee.property && parentExp.callee.property.name;
                    if (this.checkExpDefineTargetName(calleeType, calleeMemberFn))
                        return this.formatFnData(exp.name, this.formatFnArg(parentExp.arguments[0]), token, meta);
                }
                if (parentExp.type === tokenType.TaggedTemplateExpression && parentExp.tag) {
                    const tagType = parentExp.tag.type;
                    const tagMemberFn = parentExp.tag.property && parentExp.tag.property.name;
                    if (this.checkExpDefineTargetName(tagType, tagMemberFn))
                        return this.formatFnData(exp.name, EsNextTestFileParser.getTagStrValue(parentExp.quasi), token, meta);
                }
                parentExp = callStack.pop();
            }
        }
        return null;
    }
    formatFnArg(arg) {
        if (arg.type === this.tokenType.Identifier)
            return EsNextTestFileParser.formatComputedName(arg.loc.start.line);
        if (arg.type === this.tokenType.TemplateLiteral)
            return EsNextTestFileParser.getTagStrValue(arg);
        if (arg.type === this.tokenType.StringLiteral)
            return arg.value;
        return null;
    }
    getFnCall(token) {
        if (!this.isApiFn(token.callee.name))
            return null;
        return this.formatFnData(token.callee.name, this.formatFnArg(token.arguments[0]), token);
    }
    getTaggedTemplateExp(token) {
        return this.formatFnData(token.tag.name, EsNextTestFileParser.getTagStrValue(token.quasi), token);
    }
    analyzeFnCall(token) {
        const tokenType = this.tokenType;
        if (token.type === tokenType.PropertyAccessExpression)
            return this.analyzeMemberExp(token);
        if (token.type === tokenType.CallExpression) {
            const calleeType = token.callee.type;
            if (calleeType === tokenType.PropertyAccessExpression || calleeType === tokenType.CallExpression)
                return this.analyzeMemberExp(token);
            if (calleeType === tokenType.FunctionExpression || calleeType === tokenType.ArrowFunctionExpression)
                return this.collectTestCafeCalls(token.callee.body.body);
            return this.getFnCall(token);
        }
        if (token.type === tokenType.TaggedTemplateExpression) {
            if (token.tag.type === tokenType.PropertyAccessExpression)
                return this.analyzeMemberExp(token);
            return this.getTaggedTemplateExp(token);
        }
        return null;
    }
    parse(code) {
        const compilerOptions = compiler_1.default.getBabelOptions(null, code);
        delete compilerOptions.filename;
        const opts = lodash_1.assign(compilerOptions, { ast: true });
        const ast = core_1.transform(code, opts).ast;
        return this.analyze(ast.program.body);
    }
}
exports.EsNextTestFileParser = EsNextTestFileParser;
const parser = new EsNextTestFileParser();
exports.getTestList = parser.getTestList.bind(parser);
exports.getTestListFromCode = parser.getTestListFromCode.bind(parser);
//# sourceMappingURL=data:application/json;base64,