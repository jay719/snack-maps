"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandFormatter = void 0;
const lodash_1 = require("lodash");
const observation_1 = require("../../test-run/commands/observation");
const actions_1 = require("../../test-run/commands/actions");
const replicator_1 = require("../../client-functions/replicator");
const diff_1 = __importDefault(require("../../utils/diff"));
const options_1 = require("../../test-run/commands/options");
const CONFIDENTIAL_INFO_PLACEHOLDER = '********';
function isCommandOptions(obj) {
    return obj instanceof options_1.ActionOptions || obj instanceof options_1.ResizeToFitDeviceOptions || obj instanceof options_1.AssertionOptions;
}
class CommandFormatter {
    constructor(command, result) {
        this._elements = [];
        this._command = command;
        this._result = result;
    }
    format() {
        const formattedCommand = { type: this._command.type };
        if (this._command instanceof observation_1.ExecuteSelectorCommand)
            formattedCommand.selector = this._prepareSelector(this._command, 'selector');
        else if (this._command instanceof observation_1.ExecuteClientFunctionCommand)
            formattedCommand.clientFn = this._prepareClientFunction(this._command);
        else if (this._command instanceof actions_1.UseRoleCommand)
            formattedCommand.role = this._prepareRole(this._command);
        else if (this._command instanceof actions_1.NavigateToCommand)
            formattedCommand.url = this._prepareUrl(this._command);
        else if (this._command instanceof actions_1.SetNativeDialogHandlerCommand)
            formattedCommand.dialogHandler = this._prepareDialogHandler(this._command);
        else
            this._assignProperties(this._command, formattedCommand);
        this._maskConfidentialInfo(formattedCommand);
        return formattedCommand;
    }
    _maskConfidentialInfo(command) {
        var _a;
        if (!((_a = command.options) === null || _a === void 0 ? void 0 : _a.confidential))
            return;
        if (this._command instanceof actions_1.TypeTextCommand)
            command.text = CONFIDENTIAL_INFO_PLACEHOLDER;
        else if (this._command instanceof actions_1.PressKeyCommand)
            command.keys = CONFIDENTIAL_INFO_PLACEHOLDER;
    }
    _getElementByPropertyName(propertyName) {
        this._ensureSelectorElements();
        switch (propertyName) {
            case 'selector':
            case 'startSelector':
                return this._elements[0];
            case 'endSelector':
            case 'destinationSelector':
                return this._elements[1];
        }
        return this._elements[0];
    }
    _prepareSelector(command, propertyName) {
        const selectorChain = command.apiFnChain;
        const expression = selectorChain.join('');
        const result = { expression };
        let element = null;
        if (this._result)
            element = this._getElementByPropertyName(propertyName);
        if (element)
            result.element = element;
        if (command.timeout)
            result.timeout = command.timeout;
        return result;
    }
    _prepareClientFunction(command) {
        return {
            code: command.fnCode,
            args: command.args[0]
        };
    }
    _prepareDialogHandler(command) {
        return this._prepareClientFunction(command.dialogHandler);
    }
    _prepareRole(command) {
        const { loginUrl, opts, phase } = command.role;
        return { loginUrl, options: opts, phase };
    }
    _prepareUrl(command) {
        return command.url;
    }
    _assignProperties(command, formattedCommand) {
        if (!this._command._getAssignableProperties)
            return;
        const sourceProperties = this._command._getAssignableProperties().map(prop => prop.name);
        sourceProperties.forEach((key) => {
            const property = this._command[key];
            if (property instanceof observation_1.ExecuteSelectorCommand)
                formattedCommand[key] = this._prepareSelector(property, key);
            else if (isCommandOptions(property)) {
                const modifiedOptions = CommandFormatter._getModifiedOptions(property);
                if (!lodash_1.isEmpty(modifiedOptions))
                    formattedCommand[key] = modifiedOptions;
            }
            else
                formattedCommand[key] = property;
        });
    }
    _ensureSelectorElements() {
        if (!this._result || this._elements.length)
            return;
        const decoded = replicator_1.createReplicator(new replicator_1.SelectorNodeTransform()).decode(this._result);
        this._elements = Array.isArray(decoded) ? decoded : [decoded];
    }
    static _getModifiedOptions(commandOptions) {
        const constructor = commandOptions.constructor;
        const defaultOptions = new constructor();
        return diff_1.default(defaultOptions, commandOptions);
    }
}
exports.CommandFormatter = CommandFormatter;
//# sourceMappingURL=data:application/json;base64,