"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createExecutionContext = exports.setContextOptions = void 0;
const vm_1 = require("vm");
const module_1 = __importDefault(require("module"));
const path_1 = __importDefault(require("path"));
const exportable_lib_1 = __importDefault(require("../exportable-lib"));
const node_modules_folder_name_1 = __importDefault(require("../../shared/node-modules-folder-name"));
const OPTIONS_KEY = Symbol('options');
function getModuleBasePaths(currentPath) {
    const nodePaths = [];
    let parentDir = path_1.default.dirname(currentPath);
    while (currentPath !== parentDir) {
        currentPath = parentDir;
        parentDir = path_1.default.dirname(currentPath);
        nodePaths.push(path_1.default.join(currentPath, node_modules_folder_name_1.default));
    }
    return nodePaths;
}
function createRequire(filename) {
    //Deprecated since: Node v12.2.0
    if (module_1.default.createRequireFromPath)
        return module_1.default.createRequireFromPath(filename);
    if (module_1.default.createRequire)
        return module_1.default.createRequire(filename);
    const dummyModule = new module_1.default(filename, module);
    const localModulesPaths = getModuleBasePaths(filename);
    dummyModule.filename = filename;
    dummyModule.paths = localModulesPaths.concat(module.paths);
    return id => dummyModule.require(id);
}
function createSelectorDefinition(testRun) {
    return (fn, options = {}) => {
        const { skipVisibilityCheck, collectionMode } = testRun.controller.getExecutionContext()[OPTIONS_KEY];
        if (skipVisibilityCheck)
            options.visibilityCheck = false;
        if (testRun && testRun.id)
            options.boundTestRun = testRun;
        if (collectionMode)
            options.collectionMode = collectionMode;
        return exportable_lib_1.default.Selector(fn, options);
    };
}
function createClientFunctionDefinition(testRun) {
    return (fn, options = {}) => {
        if (testRun && testRun.id)
            options.boundTestRun = testRun;
        return exportable_lib_1.default.ClientFunction(fn, options);
    };
}
function setContextOptions(context, options) {
    context[OPTIONS_KEY] = options;
}
exports.setContextOptions = setContextOptions;
function createExecutionContext(testRun) {
    const filename = testRun.test.testFile.filename;
    const replacers = {
        require: createRequire(filename),
        __filename: filename,
        __dirname: path_1.default.dirname(filename),
        t: testRun.controller,
        Selector: createSelectorDefinition(testRun),
        ClientFunction: createClientFunctionDefinition(testRun),
        Role: exportable_lib_1.default.Role,
        RequestLogger: exportable_lib_1.default.RequestLogger,
        RequestMock: exportable_lib_1.default.RequestMock,
        RequestHook: exportable_lib_1.default.RequestHook
    };
    return vm_1.createContext(new Proxy(replacers, {
        get: (target, property) => {
            if (replacers.hasOwnProperty(property))
                return replacers[property];
            if (global.hasOwnProperty(property))
                return global[property];
            throw new Error(`${property} is not defined`);
        }
    }));
}
exports.createExecutionContext = createExecutionContext;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhlY3V0aW9uLWNvbnRleHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYXBpL3Rlc3QtY29udHJvbGxlci9leGVjdXRpb24tY29udGV4dC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSwyQkFBbUM7QUFDbkMsb0RBQTRCO0FBQzVCLGdEQUF3QjtBQUN4Qix1RUFBOEM7QUFDOUMscUdBQWlFO0FBRWpFLE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUV0QyxTQUFTLGtCQUFrQixDQUFFLFdBQVc7SUFDcEMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLElBQUksU0FBUyxHQUFLLGNBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFNUMsT0FBTyxXQUFXLEtBQUssU0FBUyxFQUFFO1FBQzlCLFdBQVcsR0FBRyxTQUFTLENBQUM7UUFDeEIsU0FBUyxHQUFLLGNBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFeEMsU0FBUyxDQUFDLElBQUksQ0FBQyxjQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxrQ0FBWSxDQUFDLENBQUMsQ0FBQztLQUN4RDtJQUVELE9BQU8sU0FBUyxDQUFDO0FBQ3JCLENBQUM7QUFFRCxTQUFTLGFBQWEsQ0FBRSxRQUFRO0lBQzVCLGdDQUFnQztJQUNoQyxJQUFJLGdCQUFNLENBQUMscUJBQXFCO1FBQzVCLE9BQU8sZ0JBQU0sQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUVsRCxJQUFJLGdCQUFNLENBQUMsYUFBYTtRQUNwQixPQUFPLGdCQUFNLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRTFDLE1BQU0sV0FBVyxHQUFZLElBQUksZ0JBQU0sQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDMUQsTUFBTSxpQkFBaUIsR0FBTSxrQkFBa0IsQ0FBQyxRQUFRLENBQUMs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Y3JlYXRlQ29udGV4dCB9IGZyb20gJ3ZtJztcbmltcG9ydCBNb2R1bGUgZnJvbSAnbW9kdWxlJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGV4cG9ydGFibGVMaWIgZnJvbSAnLi4vZXhwb3J0YWJsZS1saWInO1xuaW1wb3J0IE5PREVfTU9EVUxFUyBmcm9tICcuLi8uLi9zaGFyZWQvbm9kZS1tb2R1bGVzLWZvbGRlci1uYW1lJztcblxuY29uc3QgT1BUSU9OU19LRVkgPSBTeW1ib2woJ29wdGlvbnMnKTtcblxuZnVuY3Rpb24gZ2V0TW9kdWxlQmFzZVBhdGhzIChjdXJyZW50UGF0aCkge1xuICAgIGNvbnN0IG5vZGVQYXRocyA9IFtdO1xuICAgIGxldCBwYXJlbnREaXIgICA9IHBhdGguZGlybmFtZShjdXJyZW50UGF0aCk7XG5cbiAgICB3aGlsZSAoY3VycmVudFBhdGggIT09IHBhcmVudERpcikge1xuICAgICAgICBjdXJyZW50UGF0aCA9IHBhcmVudERpcjtcbiAgICAgICAgcGFyZW50RGlyICAgPSBwYXRoLmRpcm5hbWUoY3VycmVudFBhdGgpO1xuXG4gICAgICAgIG5vZGVQYXRocy5wdXNoKHBhdGguam9pbihjdXJyZW50UGF0aCwgTk9ERV9NT0RVTEVTKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGVQYXRocztcbn1cblxuZnVuY3Rpb24gY3JlYXRlUmVxdWlyZSAoZmlsZW5hbWUpIHtcbiAgICAvL0RlcHJlY2F0ZWQgc2luY2U6IE5vZGUgdjEyLjIuMFxuICAgIGlmIChNb2R1bGUuY3JlYXRlUmVxdWlyZUZyb21QYXRoKVxuICAgICAgICByZXR1cm4gTW9kdWxlLmNyZWF0ZVJlcXVpcmVGcm9tUGF0aChmaWxlbmFtZSk7XG5cbiAgICBpZiAoTW9kdWxlLmNyZWF0ZVJlcXVpcmUpXG4gICAgICAgIHJldHVybiBNb2R1bGUuY3JlYXRlUmVxdWlyZShmaWxlbmFtZSk7XG5cbiAgICBjb25zdCBkdW1teU1vZHVsZSAgICAgICAgICA9IG5ldyBNb2R1bGUoZmlsZW5hbWUsIG1vZHVsZSk7XG4gICAgY29uc3QgbG9jYWxNb2R1bGVzUGF0aHMgICAgPSBnZXRNb2R1bGVCYXNlUGF0aHMoZmlsZW5hbWUpO1xuXG4gICAgZHVtbXlNb2R1bGUuZmlsZW5hbWUgPSBmaWxlbmFtZTtcbiAgICBkdW1teU1vZHVsZS5wYXRocyAgICA9IGxvY2FsTW9kdWxlc1BhdGhzLmNvbmNhdChtb2R1bGUucGF0aHMpO1xuXG4gICAgcmV0dXJuIGlkID0+IGR1bW15TW9kdWxlLnJlcXVpcmUoaWQpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTZWxlY3RvckRlZmluaXRpb24gKHRlc3RSdW4pIHtcbiAgICByZXR1cm4gKGZuLCBvcHRpb25zID0ge30pID0+IHtcbiAgICAgICAgY29uc3QgeyBza2lwVmlzaWJpbGl0eUNoZWNrLCBjb2xsZWN0aW9uTW9kZSB9ID0gdGVzdFJ1bi5jb250cm9sbGVyLmdldEV4ZWN1dGlvbkNvbnRleHQoKVtPUFRJT05TX0tFWV07XG5cbiAgICAgICAgaWYgKHNraXBWaXNpYmlsaXR5Q2hlY2spXG4gICAgICAgICAgICBvcHRpb25zLnZpc2liaWxpdHlDaGVjayA9IGZhbHNlO1xuXG4gICAgICAgIGlmICh0ZXN0UnVuICYmIHRlc3RSdW4uaWQpXG4gICAgICAgICAgICBvcHRpb25zLmJvdW5kVGVzdFJ1biA9IHRlc3RSdW47XG5cbiAgICAgICAgaWYgKGNvbGxlY3Rpb25Nb2RlKVxuICAgICAgICAgICAgb3B0aW9ucy5jb2xsZWN0aW9uTW9kZSA9IGNvbGxlY3Rpb25Nb2RlO1xuXG4gICAgICAgIHJldHVybiBleHBvcnRhYmxlTGliLlNlbGVjdG9yKGZuLCBvcHRpb25zKTtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDbGllbnRGdW5jdGlvbkRlZmluaXRpb24gKHRlc3RSdW4pIHtcbiAgICByZXR1cm4gKGZuLCBvcHRpb25zID0ge30pID0+IHtcbiAgICAgICAgaWYgKHRlc3RSdW4gJiYgdGVzdFJ1bi5pZClcbiAgICAgICAgICAgIG9wdGlvbnMuYm91bmRUZXN0UnVuID0gdGVzdFJ1bjtcblxuICAgICAgICByZXR1cm4gZXhwb3J0YWJsZUxpYi5DbGllbnRGdW5jdGlvbihmbiwgb3B0aW9ucyk7XG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldENvbnRleHRPcHRpb25zIChjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgY29udGV4dFtPUFRJT05TX0tFWV0gPSBvcHRpb25zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRXhlY3V0aW9uQ29udGV4dCAodGVzdFJ1bikge1xuICAgIGNvbnN0IGZpbGVuYW1lID0gdGVzdFJ1bi50ZXN0LnRlc3RGaWxlLmZpbGVuYW1lO1xuXG4gICAgY29uc3QgcmVwbGFjZXJzID0ge1xuICAgICAgICByZXF1aXJlOiAgICAgICAgY3JlYXRlUmVxdWlyZShmaWxlbmFtZSksXG4gICAgICAgIF9fZmlsZW5hbWU6ICAgICBmaWxlbmFtZSxcbiAgICAgICAgX19kaXJuYW1lOiAgICAgIHBhdGguZGlybmFtZShmaWxlbmFtZSksXG4gICAgICAgIHQ6ICAgICAgICAgICAgICB0ZXN0UnVuLmNvbnRyb2xsZXIsXG4gICAgICAgIFNlbGVjdG9yOiAgICAgICBjcmVhdGVTZWxlY3RvckRlZmluaXRpb24odGVzdFJ1biksXG4gICAgICAgIENsaWVudEZ1bmN0aW9uOiBjcmVhdGVDbGllbnRGdW5jdGlvbkRlZmluaXRpb24odGVzdFJ1biksXG4gICAgICAgIFJvbGU6ICAgICAgICAgICBleHBvcnRhYmxlTGliLlJvbGUsXG4gICAgICAgIFJlcXVlc3RMb2dnZXI6ICBleHBvcnRhYmxlTGliLlJlcXVlc3RMb2dnZXIsXG4gICAgICAgIFJlcXVlc3RNb2NrOiAgICBleHBvcnRhYmxlTGliLlJlcXVlc3RNb2NrLFxuICAgICAgICBSZXF1ZXN0SG9vazogICAgZXhwb3J0YWJsZUxpYi5SZXF1ZXN0SG9va1xuICAgIH07XG5cbiAgICByZXR1cm4gY3JlYXRlQ29udGV4dChuZXcgUHJveHkocmVwbGFjZXJzLCB7XG4gICAgICAgIGdldDogKHRhcmdldCwgcHJvcGVydHkpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXBsYWNlcnMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKVxuICAgICAgICAgICAgICAgIHJldHVybiByZXBsYWNlcnNbcHJvcGVydHldO1xuXG4gICAgICAgICAgICBpZiAoZ2xvYmFsLmhhc093blByb3BlcnR5KHByb3BlcnR5KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2xvYmFsW3Byb3BlcnR5XTtcblxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3Byb3BlcnR5fSBpcyBub3QgZGVmaW5lZGApO1xuICAgICAgICB9XG4gICAgfSkpO1xufVxuIl19