"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const test_run_tracker_1 = __importDefault(require("../../api/test-run-tracker"));
const prerender_callsite_1 = __importDefault(require("../../utils/prerender-callsite"));
const test_controller_1 = __importDefault(require("../../api/test-controller"));
const observed_callsites_storage_1 = __importDefault(require("../../test-run/observed-callsites-storage"));
const warning_log_1 = __importDefault(require("../../notifications/warning-log"));
const executor_1 = __importDefault(require("../../assertions/executor"));
const type_1 = __importDefault(require("../../test-run/commands/type"));
const serviceCommands = __importStar(require("../../test-run/commands/service"));
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
class TestRunProxy {
    constructor({ dispatcher, id, test, options }) {
        this.dispatcher = dispatcher;
        this.id = id;
        this.test = test;
        this.ctx = Object.create(null);
        this._options = options;
        // TODO: Synchronize these properties with their real counterparts in the main process.
        // Postponed until (GH-3244). See details in (GH-5250).
        this.controller = new test_controller_1.default(this);
        this.observedCallsites = new observed_callsites_storage_1.default();
        this.warningLog = new warning_log_1.default();
        test_run_tracker_1.default.activeTestRuns[id] = this;
        this._initializeRequestHooks();
    }
    _initializeRequestHooks() {
        this.test.requestHooks.forEach(this._attachWarningLog, this);
    }
    _restoreRequestFilterRule(event) {
        event.requestFilterRule = testcafe_hammerhead_1.RequestFilterRule.from(event.requestFilterRule);
    }
    _getAssertionTimeout(command) {
        // @ts-ignore
        const { timeout: commandTimeout } = command.options;
        return commandTimeout === void 0
            ? this._options.assertionTimeout
            : commandTimeout;
    }
    async _executeAssertion(command, callsite) {
        const assertionTimeout = this._getAssertionTimeout(command);
        const executor = new executor_1.default(command, assertionTimeout, callsite);
        executor.once('start-assertion-retries', timeout => this.executeCommand(new serviceCommands.ShowAssertionRetriesStatusCommand(timeout)));
        executor.once('end-assertion-retries', success => this.executeCommand(new serviceCommands.HideAssertionRetriesStatusCommand(success)));
        return executor.run();
    }
    _attachWarningLog(hook) {
        hook._warningLog = this.warningLog;
    }
    _detachWarningLog(hook) {
        hook._warningLog = null;
    }
    async executeAction(apiMethodName, command, callsite) {
        if (callsite)
            callsite = prerender_callsite_1.default(callsite);
        if (command.type === type_1.default.assertion)
            return this._executeAssertion(command, callsite);
        return this.dispatcher.executeAction({ apiMethodName, command, callsite, id: this.id });
    }
    executeActionSync(apiMethodName, command, callsite) {
        if (callsite)
            callsite = prerender_callsite_1.default(callsite);
        return this.dispatcher.executeActionSync({ apiMethodName, command, callsite, id: this.id });
    }
    async executeCommand(command) {
        return this.dispatcher.executeCommand({ command, id: this.id });
    }
    async addRequestHook(hook) {
        if (this.test.requestHooks.includes(hook))
            return;
        this.test.requestHooks.push(hook);
        this._attachWarningLog(hook);
        await this.dispatcher.addRequestEventListeners({
            hookId: hook.id,
            hookClassName: hook._className,
            rules: hook._requestFilterRules
        });
    }
    async removeRequestHook(hook) {
        if (!this.test.requestHooks.includes(hook))
            return;
        lodash_1.pull(this.test.requestHooks, hook);
        this._detachWarningLog(hook);
        await this.dispatcher.removeRequestEventListeners({ rules: hook._requestFilterRules });
    }
}
exports.default = TestRunProxy;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC1ydW4tcHJveHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2VydmljZXMvY29tcGlsZXIvdGVzdC1ydW4tcHJveHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsbUNBQThCO0FBQzlCLGtGQUF3RDtBQUN4RCx3RkFBK0Q7QUFFL0QsZ0ZBQXVEO0FBQ3ZELDJHQUFpRjtBQUNqRixrRkFBeUQ7QUFFekQseUVBQTBEO0FBRTFELHdFQUF3RDtBQUV4RCxpRkFBbUU7QUFNbkUsNkRBSzZCO0FBUTdCLE1BQU0sWUFBWTtJQVdkLFlBQW9CLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFvQjtRQUNuRSxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUU3QixJQUFJLENBQUMsRUFBRSxHQUFTLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsSUFBSSxHQUFPLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsR0FBRyxHQUFRLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7UUFFeEIsdUZBQXVGO1FBQ3ZGLHVEQUF1RDtRQUN2RCxJQUFJLENBQUMsVUFBVSxHQUFVLElBQUkseUJBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxvQ0FBd0IsRUFBRSxDQUFDO1FBQ3hELElBQUksQ0FBQyxVQUFVLEdBQVUsSUFBSSxxQkFBVSxFQUFFLENBQUM7UUFFMUMsMEJBQWMsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBRXpDLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO0lBQ25DLENBQUM7SUFFTyx1QkFBdUI7UUFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsT0FB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QUMsSUFBSSxDQUFDO1lBQ3JDLE9BQU87UUFFWCxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTdCLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyx3QkFBd0IsQ0FBQztZQUMzQyxNQUFNLEVBQVMsSUFBSSxDQUFDLEVBQUU7WUFDdEIsYUFBYSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQzlCLEtBQUssRUFBVSxJQUFJLENBQUMsbUJBQW1CO1NBQzFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTSxLQUFLLENBQUMsaUJBQWlCLENBQUUsSUFBaUI7UUFDN0MsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7WUFDdEMsT0FBTztRQUVYLGFBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFN0IsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLDJCQUEyQixDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUM7SUFDM0YsQ0FBQztDQUNKO0FBRUQsa0JBQWUsWUFBWSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHVsbCB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgdGVzdFJ1blRyYWNrZXIgZnJvbSAnLi4vLi4vYXBpL3Rlc3QtcnVuLXRyYWNrZXInO1xuaW1wb3J0IHByZXJlbmRlckNhbGxzaXRlIGZyb20gJy4uLy4uL3V0aWxzL3ByZXJlbmRlci1jYWxsc2l0ZSc7XG5pbXBvcnQgeyBUZXN0UnVuRGlzcGF0Y2hlclByb3RvY29sIH0gZnJvbSAnLi9wcm90b2NvbCc7XG5pbXBvcnQgVGVzdENvbnRyb2xsZXIgZnJvbSAnLi4vLi4vYXBpL3Rlc3QtY29udHJvbGxlcic7XG5pbXBvcnQgT2JzZXJ2ZWRDYWxsc2l0ZXNTdG9yYWdlIGZyb20gJy4uLy4uL3Rlc3QtcnVuL29ic2VydmVkLWNhbGxzaXRlcy1zdG9yYWdlJztcbmltcG9ydCBXYXJuaW5nTG9nIGZyb20gJy4uLy4uL25vdGlmaWNhdGlvbnMvd2FybmluZy1sb2cnO1xuaW1wb3J0IEFzc2VydGlvbkNvbW1hbmQgZnJvbSAnLi4vLi4vdGVzdC1ydW4vY29tbWFuZHMvYXNzZXJ0aW9uJztcbmltcG9ydCBBc3NlcnRpb25FeGVjdXRvciBmcm9tICcuLi8uLi9hc3NlcnRpb25zL2V4ZWN1dG9yJztcbmltcG9ydCB7IERpY3Rpb25hcnkgfSBmcm9tICcuLi8uLi9jb25maWd1cmF0aW9uL2ludGVyZmFjZXMnO1xuaW1wb3J0IENPTU1BTkRfVFlQRSBmcm9tICcuLi8uLi90ZXN0LXJ1bi9jb21tYW5kcy90eXBlJztcbmltcG9ydCBDb21tYW5kQmFzZSBmcm9tICcuLi8uLi90ZXN0LXJ1bi9jb21tYW5kcy9iYXNlJztcbmltcG9ydCAqIGFzIHNlcnZpY2VDb21tYW5kcyBmcm9tICcuLi8uLi90ZXN0LXJ1bi9jb21tYW5kcy9zZXJ2aWNlJztcbmltcG9ydCB7IFRlc3RSdW5Qcm94eUluaXQgfSBmcm9tICcuLi9pbnRlcmZhY2VzJztcbmltcG9ydCBUZXN0IGZyb20gJy4uLy4uL2FwaS9zdHJ1Y3R1cmUvdGVzdCc7XG5pbXBvcnQgUmVxdWVzdEhvb2sgZnJvbSAnLi4vLi4vYXBpL3JlcXVlc3QtaG9va3MvaG9vayc7XG5pbXBvcnQgUmVxdWVzdEhvb2tNZXRob2ROYW1lcyBmcm9tICcuLi8uLi9hcGkvcmVxdWVzdC1ob29rcy9ob29rLW1ldGhvZC1uYW1lcyc7XG5cbmltcG9ydCB7XG4gICAgQ29uZmlndXJlUmVzcG9uc2VFdmVudCxcbiAgICBSZXF1ZXN0RXZlbnQsXG4gICAgUmVxdWVzdEZpbHRlclJ1bGUsXG4gICAgUmVzcG9uc2VFdmVudFxufSBmcm9tICd0ZXN0Y2FmZS1oYW1tZXJoZWFkJztcblxuaW50ZXJmYWNlIFJlcXVlc3RIb29rRXZlbnREZXNjcmlwdG9yIHtcbiAgICBob29rSWQ6IHN0cmluZztcbiAgICBuYW1lOiBSZXF1ZXN0SG9va01ldGhvZE5hbWVzO1xuICAgIGV2ZW50RGF0YTogUmVxdWVzdEV2ZW50IHwgQ29uZmlndXJlUmVzcG9uc2VFdmVudCB8IFJlc3BvbnNlRXZlbnQ7XG59XG5cbmNsYXNzIFRlc3RSdW5Qcm94eSB7XG4gICAgcHVibGljIHJlYWRvbmx5IGlkOiBzdHJpbmc7XG4gICAgcHVibGljIHJlYWRvbmx5IHRlc3Q6IFRlc3Q7XG4gICAgcHVibGljIHJlYWRvbmx5IGNvbnRyb2xsZXI6IFRlc3RDb250cm9sbGVyO1xuICAgIHB1YmxpYyByZWFkb25seSBvYnNlcnZlZENhbGxzaXRlczogT2JzZXJ2ZWRDYWxsc2l0ZXNTdG9yYWdlO1xuICAgIHB1YmxpYyByZWFkb25seSB3YXJuaW5nTG9nOiBXYXJuaW5nTG9nO1xuICAgIHB1YmxpYyBmaXh0dXJlQ3R4Pzogb2JqZWN0O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZGlzcGF0Y2hlcjogVGVzdFJ1bkRpc3BhdGNoZXJQcm90b2NvbDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGN0eDogdW5rbm93bjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9vcHRpb25zOiBEaWN0aW9uYXJ5PE9wdGlvblZhbHVlPjtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvciAoeyBkaXNwYXRjaGVyLCBpZCwgdGVzdCwgb3B0aW9ucyB9OiBUZXN0UnVuUHJveHlJbml0KSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hlciA9IGRpc3BhdGNoZXI7XG5cbiAgICAgICAgdGhpcy5pZCAgICAgICA9IGlkO1xuICAgICAgICB0aGlzLnRlc3QgICAgID0gdGVzdDtcbiAgICAgICAgdGhpcy5jdHggICAgICA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgICAgIC8vIFRPRE86IFN5bmNocm9uaXplIHRoZXNlIHByb3BlcnRpZXMgd2l0aCB0aGVpciByZWFsIGNvdW50ZXJwYXJ0cyBpbiB0aGUgbWFpbiBwcm9jZXNzLlxuICAgICAgICAvLyBQb3N0cG9uZWQgdW50aWwgKEdILTMyNDQpLiBTZWUgZGV0YWlscyBpbiAoR0gtNTI1MCkuXG4gICAgICAgIHRoaXMuY29udHJvbGxlciAgICAgICAgPSBuZXcgVGVzdENvbnRyb2xsZXIodGhpcyk7XG4gICAgICAgIHRoaXMub2JzZXJ2ZWRDYWxsc2l0ZXMgPSBuZXcgT2JzZXJ2ZWRDYWxsc2l0ZXNTdG9yYWdlKCk7XG4gICAgICAgIHRoaXMud2FybmluZ0xvZyAgICAgICAgPSBuZXcgV2FybmluZ0xvZygpO1xuXG4gICAgICAgIHRlc3RSdW5UcmFja2VyLmFjdGl2ZVRlc3RSdW5zW2lkXSA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZVJlcXVlc3RIb29rcygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2luaXRpYWxpemVSZXF1ZXN0SG9va3MgKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnRlc3QucmVxdWVzdEhvb2tzLmZvckVhY2godGhpcy5fYXR0YWNoV2FybmluZ0xvZywgdGhpcyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfcmVzdG9yZVJlcXVlc3RGaWx0ZXJSdWxlIChldmVudDogUmVxdWVzdEV2ZW50IHwgQ29uZmlndXJlUmVzcG9uc2VFdmVudCB8IFJlc3BvbnNlRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgZXZlbnQucmVxdWVzdEZpbHRlclJ1bGUgPSBSZXF1ZXN0RmlsdGVyUnVsZS5mcm9tKGV2ZW50LnJlcXVlc3RGaWx0ZXJSdWxlIGFzIG9iamVjdCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfZ2V0QXNzZXJ0aW9uVGltZW91dCAoY29tbWFuZDogQXNzZXJ0aW9uQ29tbWFuZCk6IG51bWJlciB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgY29uc3QgeyB0aW1lb3V0OiBjb21tYW5kVGltZW91dCB9ID0gY29tbWFuZC5vcHRpb25zO1xuXG4gICAgICAgIHJldHVybiBjb21tYW5kVGltZW91dCA9PT0gdm9pZCAwXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMuYXNzZXJ0aW9uVGltZW91dFxuICAgICAgICAgICAgOiBjb21tYW5kVGltZW91dDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIF9leGVjdXRlQXNzZXJ0aW9uIChjb21tYW5kOiBBc3NlcnRpb25Db21tYW5kLCBjYWxsc2l0ZTogdW5rbm93bik6IFByb21pc2U8dW5rbm93bj4ge1xuICAgICAgICBjb25zdCBhc3NlcnRpb25UaW1lb3V0ID0gdGhpcy5fZ2V0QXNzZXJ0aW9uVGltZW91dChjb21tYW5kKTtcblxuICAgICAgICBjb25zdCBleGVjdXRvciA9IG5ldyBBc3NlcnRpb25FeGVjdXRvcihjb21tYW5kLCBhc3NlcnRpb25UaW1lb3V0LCBjYWxsc2l0ZSk7XG5cbiAgICAgICAgZXhlY3V0b3Iub25jZSgnc3RhcnQtYXNzZXJ0aW9uLXJldHJpZXMnLCB0aW1lb3V0ID0+IHRoaXMuZXhlY3V0ZUNvbW1hbmQobmV3IHNlcnZpY2VDb21tYW5kcy5TaG93QXNzZXJ0aW9uUmV0cmllc1N0YXR1c0NvbW1hbmQodGltZW91dCkpKTtcbiAgICAgICAgZXhlY3V0b3Iub25jZSgnZW5kLWFzc2VydGlvbi1yZXRyaWVzJywgc3VjY2VzcyA9PiB0aGlzLmV4ZWN1dGVDb21tYW5kKG5ldyBzZXJ2aWNlQ29tbWFuZHMuSGlkZUFzc2VydGlvblJldHJpZXNTdGF0dXNDb21tYW5kKHN1Y2Nlc3MpKSk7XG5cbiAgICAgICAgcmV0dXJuIGV4ZWN1dG9yLnJ1bigpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2F0dGFjaFdhcm5pbmdMb2cgKGhvb2s6IFJlcXVlc3RIb29rKTogdm9pZCB7XG4gICAgICAgIGhvb2suX3dhcm5pbmdMb2cgPSB0aGlzLndhcm5pbmdMb2c7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfZGV0YWNoV2FybmluZ0xvZyAoaG9vazogUmVxdWVzdEhvb2spOiB2b2lkIHtcbiAgICAgICAgaG9vay5fd2FybmluZ0xvZyA9IG51bGw7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGV4ZWN1dGVBY3Rpb24gKGFwaU1ldGhvZE5hbWU6IHN0cmluZywgY29tbWFuZDogdW5rbm93biwgY2FsbHNpdGU6IHVua25vd24pOiBQcm9taXNlPHVua25vd24+IHtcbiAgICAgICAgaWYgKGNhbGxzaXRlKVxuICAgICAgICAgICAgY2FsbHNpdGUgPSBwcmVyZW5kZXJDYWxsc2l0ZShjYWxsc2l0ZSk7XG5cbiAgICAgICAgaWYgKChjb21tYW5kIGFzIENvbW1hbmRCYXNlKS50eXBlID09PSBDT01NQU5EX1RZUEUuYXNzZXJ0aW9uKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGVBc3NlcnRpb24oY29tbWFuZCBhcyBBc3NlcnRpb25Db21tYW5kLCBjYWxsc2l0ZSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2hlci5leGVjdXRlQWN0aW9uKHsgYXBpTWV0aG9kTmFtZSwgY29tbWFuZCwgY2FsbHNpdGUsIGlkOiB0aGlzLmlkIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBleGVjdXRlQWN0aW9uU3luYyAoYXBpTWV0aG9kTmFtZTogc3RyaW5nLCBjb21tYW5kOiB1bmtub3duLCBjYWxsc2l0ZTogdW5rbm93bik6IHVua25vd24ge1xuICAgICAgICBpZiAoY2FsbHNpdGUpXG4gICAgICAgICAgICBjYWxsc2l0ZSA9IHByZXJlbmRlckNhbGxzaXRlKGNhbGxzaXRlKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5kaXNwYXRjaGVyLmV4ZWN1dGVBY3Rpb25TeW5jKHsgYXBpTWV0aG9kTmFtZSwgY29tbWFuZCwgY2FsbHNpdGUsIGlkOiB0aGlzLmlkIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBleGVjdXRlQ29tbWFuZCAoY29tbWFuZDogdW5rbm93bik6IFByb21pc2U8dW5rbm93bj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXNwYXRjaGVyLmV4ZWN1dGVDb21tYW5kKHsgY29tbWFuZCwgaWQ6IHRoaXMuaWQgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGFkZFJlcXVlc3RIb29rIChob29rOiBSZXF1ZXN0SG9vayk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBpZiAodGhpcy50ZXN0LnJlcXVlc3RIb29rcy5pbmNsdWRlcyhob29rKSlcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICB0aGlzLnRlc3QucmVxdWVzdEhvb2tzLnB1c2goaG9vayk7XG4gICAgICAgIHRoaXMuX2F0dGFjaFdhcm5pbmdMb2coaG9vayk7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5kaXNwYXRjaGVyLmFkZFJlcXVlc3RFdmVudExpc3RlbmVycyh7XG4gICAgICAgICAgICBob29rSWQ6ICAgICAgICBob29rLmlkLFxuICAgICAgICAgICAgaG9va0NsYXNzTmFtZTogaG9vay5fY2xhc3NOYW1lLFxuICAgICAgICAgICAgcnVsZXM6ICAgICAgICAgaG9vay5fcmVxdWVzdEZpbHRlclJ1bGVzXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyByZW1vdmVSZXF1ZXN0SG9vayAoaG9vazogUmVxdWVzdEhvb2spOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKCF0aGlzLnRlc3QucmVxdWVzdEhvb2tzLmluY2x1ZGVzKGhvb2spKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIHB1bGwodGhpcy50ZXN0LnJlcXVlc3RIb29rcywgaG9vayk7XG4gICAgICAgIHRoaXMuX2RldGFjaFdhcm5pbmdMb2coaG9vayk7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5kaXNwYXRjaGVyLnJlbW92ZVJlcXVlc3RFdmVudExpc3RlbmVycyh7IHJ1bGVzOiBob29rLl9yZXF1ZXN0RmlsdGVyUnVsZXMgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUZXN0UnVuUHJveHk7XG5cblxuIl19