"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const io_1 = require("./io");
const test_structure_1 = require("../serialization/test-structure");
const prepare_options_1 = __importDefault(require("../serialization/prepare-options"));
const test_run_tracker_1 = __importDefault(require("../../api/test-run-tracker"));
const proxy_1 = require("../utils/ipc/proxy");
const transport_1 = require("../utils/ipc/transport");
const async_event_emitter_1 = __importDefault(require("../../utils/async-event-emitter"));
const error_list_1 = __importDefault(require("../../errors/error-list"));
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const SERVICE_PATH = require.resolve('./service');
class CompilerHost extends async_event_emitter_1.default {
    constructor() {
        super();
        this.runtime = Promise.resolve(void 0);
    }
    _setupRoutes(proxy) {
        proxy.register([
            this.executeAction,
            this.executeCommand,
            this.ready,
            this.onRequestHookEvent,
            this.setMock,
            this.setConfigureResponseEventOptions,
            this.setHeaderOnConfigureResponseEvent,
            this.removeHeaderOnConfigureResponseEvent,
            this.executeRequestFilterRulePredicate,
            this.executeMockPredicate,
            this.getWarningMessages,
            this.addRequestEventListeners,
            this.removeRequestEventListeners,
            this.initializeTestRunData
        ], this);
    }
    async _init(runtime) {
        const resolvedRuntime = await runtime;
        if (resolvedRuntime)
            return resolvedRuntime;
        try {
            const service = child_process_1.spawn(process.argv0, [SERVICE_PATH], { stdio: [0, 1, 2, 'pipe', 'pipe', 'pipe'] });
            // HACK: Node.js definition are not correct when additional I/O channels are sp
            const stdio = service.stdio;
            const proxy = new proxy_1.IPCProxy(new transport_1.HostTransport(stdio[io_1.HOST_INPUT_FD], stdio[io_1.HOST_OUTPUT_FD], stdio[io_1.HOST_SYNC_FD]));
            this._setupRoutes(proxy);
            await this.once('ready');
            return { proxy, service };
        }
        catch (e) {
            return void 0;
        }
    }
    async _getRuntime() {
        const runtime = await this.runtime;
        if (!runtime)
            throw new Error('Runtime is not available.');
        return runtime;
    }
    _prepareEventData(eventData) {
        // TODO: Remove eventData._requestContext into 'testcafe-hammerhead' module
        // after switching to the compiler service mode.
        // NOTE: Access to the deprecated property inside of the unserializable 'eventData._requestContext' property
        // causes the node's deprecation warning.
        const clonedEventData = Object.assign({}, eventData);
        // @ts-ignore
        delete clonedEventData._requestContext;
        return clonedEventData;
    }
    async init() {
        this.runtime = this._init(this.runtime);
        await this.runtime;
    }
    async stop() {
        const { service } = await this._getRuntime();
        service.kill();
    }
    _wrapTestFunction(id, functionName) {
        return async (testRun) => {
            try {
                return await this.runTestFn({ id, functionName, testRunId: testRun.id });
            }
            catch (err) {
                const errList = new error_list_1.default();
                errList.addError(err);
                throw errList;
            }
        };
    }
    _wrapRequestFilterRulePredicate({ testId, hookId, ruleId }) {
        return async (requestInfo) => {
            return await this.executeRequestFilterRulePredicate({ testId, hookId, ruleId, requestInfo });
        };
    }
    _wrapMockPredicate({ mock, testId, hookId, ruleId }) {
        mock.body = async (requestInfo, res) => {
            return await this.executeMockPredicate({ testId, hookId, ruleId, requestInfo, res });
        };
    }
    async ready() {
        this.emit('ready');
    }
    async executeAction(data) {
        const targetTestRun = test_run_tracker_1.default.activeTestRuns[data.id];
        if (!targetTestRun)
            return void 0;
        return targetTestRun.executeAction(data.apiMethodName, data.command, data.callsite);
    }
    executeActionSync() {
        throw new Error('The method should not be called.');
    }
    async executeCommand({ command, id }) {
        const targetTestRun = test_run_tracker_1.default.activeTestRuns[id];
        if (!targetTestRun)
            return void 0;
        return targetTestRun.executeCommand(command);
    }
    async getTests({ sourceList, compilerOptions }) {
        const { proxy } = await this._getRuntime();
        const units = await proxy.call(this.getTests, { sourceList, compilerOptions });
        return test_structure_1.restore(units, (...args) => this._wrapTestFunction(...args), (ruleLocator) => this._wrapRequestFilterRulePredicate(ruleLocator));
    }
    async runTestFn({ id, functionName, testRunId }) {
        const { proxy } = await this._getRuntime();
        return await proxy.call(this.runTestFn, { id, functionName, testRunId });
    }
    async cleanUp() {
        const { proxy } = await this._getRuntime();
        await proxy.call(this.cleanUp);
    }
    async setOptions({ value }) {
        const { proxy } = await this._getRuntime();
        const preparedOptions = prepare_options_1.default(value);
        await proxy.call(this.setOptions, { value: preparedOptions });
    }
    async onRequestHookEvent({ name, testId, hookId, eventData }) {
        const { proxy } = await this._getRuntime();
        await proxy.call(this.onRequestHookEvent, {
            name,
            testId,
            hookId,
            eventData: this._prepareEventData(eventData)
        });
    }
    async setMock({ testId, hookId, ruleId, responseEventId, mock }) {
        const mockDefinedWithPredicate = mock.isPredicate;
        mock = testcafe_hammerhead_1.ResponseMock.from(mock);
        if (mockDefinedWithPredicate)
            this._wrapMockPredicate({ mock, testId, hookId, ruleId });
        await this.emit('setMock', [responseEventId, mock]);
    }
    async setConfigureResponseEventOptions({ eventId, opts }) {
        await this.emit('setConfigureResponseEventOptions', [eventId, opts]);
    }
    async setHeaderOnConfigureResponseEvent({ eventId, headerName, headerValue }) {
        await this.emit('setHeaderOnConfigureResponseEvent', [eventId, headerName, headerValue]);
    }
    async removeHeaderOnConfigureResponseEvent({ eventId, headerName }) {
        await this.emit('removeHeaderOnConfigureResponseEvent', [eventId, headerName]);
    }
    async executeRequestFilterRulePredicate({ testId, hookId, ruleId, requestInfo }) {
        const { proxy } = await this._getRuntime();
        return await proxy.call(this.executeRequestFilterRulePredicate, { testId, hookId, ruleId, requestInfo });
    }
    async executeMockPredicate({ testId, hookId, ruleId, requestInfo, res }) {
        const { proxy } = await this._getRuntime();
        return await proxy.call(this.executeMockPredicate, { testId, hookId, ruleId, requestInfo, res });
    }
    async getWarningMessages({ testRunId }) {
        const { proxy } = await this._getRuntime();
        return proxy.call(this.getWarningMessages, { testRunId });
    }
    async addRequestEventListeners({ hookId, hookClassName, rules }) {
        rules = testcafe_hammerhead_1.RequestFilterRule.fromArray(rules);
        await this.emit('addRequestEventListeners', { hookId, hookClassName, rules });
    }
    async removeRequestEventListeners({ rules }) {
        rules = testcafe_hammerhead_1.RequestFilterRule.fromArray(rules);
        await this.emit('removeRequestEventListeners', { rules });
    }
    async initializeTestRunData({ testRunId, testId }) {
        const { proxy } = await this._getRuntime();
        return proxy.call(this.initializeTestRunData, { testRunId, testId });
    }
}
exports.default = CompilerHost;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,