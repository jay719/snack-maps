"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertType = exports.is = void 0;
const lodash_1 = require("lodash");
const _1 = require("./");
const types_1 = require("../types");
const hook_1 = __importDefault(require("../../api/request-hooks/hook"));
const test_timeout_1 = __importDefault(require("../../api/structure/test-timeout"));
const START_FROM_VOWEL_RE = /^[aeiou]/i;
function getIndefiniteArticle(text) {
    return START_FROM_VOWEL_RE.test(text) ? 'an' : 'a';
}
function isNonNegativeValue(value) {
    return lodash_1.isFinite(value) && value >= 0;
}
function getNumberTypeActualValueMsg(value, type) {
    if (type !== 'number')
        return type;
    if (Number.isNaN(value))
        return NaN;
    if (!lodash_1.isFinite(value))
        return Infinity;
    return value;
}
function hasSomePropInObject(obj, props) {
    return !!obj &&
        typeof obj === 'object' &&
        props.some(prop => prop in obj);
}
exports.is = {
    number: {
        name: 'number',
        predicate: lodash_1.isFinite,
        getActualValueMsg: getNumberTypeActualValueMsg
    },
    nonNegativeNumber: {
        name: 'non-negative number',
        predicate: isNonNegativeValue,
        getActualValueMsg: getNumberTypeActualValueMsg
    },
    nonNegativeNumberString: {
        name: 'non-negative number',
        predicate: value => isNonNegativeValue(parseInt(value, 10)),
        getActualValueMsg: value => {
            const number = parseInt(value, 10);
            return isNaN(number) ? JSON.stringify(value) : number;
        }
    },
    boolean: {
        name: 'boolean',
        predicate: (value, type) => type === 'boolean'
    },
    string: {
        name: 'string',
        predicate: (value, type) => type === 'string'
    },
    function: {
        name: 'function',
        predicate: (value, type) => type === 'function'
    },
    regExp: {
        name: 'regular expression',
        predicate: lodash_1.isRegExp
    },
    array: {
        name: 'array',
        predicate: value => Array.isArray(value)
    },
    nonNullObject: {
        name: 'non-null object',
        predicate: (value, type) => type === 'object' && !lodash_1.isNil(value),
        getActualValueMsg: (value, type) => lodash_1.isNil(value) ? String(value) : type
    },
    requestHookSubclass: {
        name: 'RequestHook subclass',
        predicate: value => value instanceof hook_1.default && value.constructor && value.constructor !== hook_1.default
    },
    clientScriptInitializer: {
        name: 'client script initializer',
        predicate: obj => hasSomePropInObject(obj, ['path', 'content', 'module'])
    },
    testTimeouts: {
        name: 'test timeouts initializer',
        predicate: obj => hasSomePropInObject(obj, Object.keys(test_timeout_1.default))
    }
};
function assertType(types, callsiteName, what, value) {
    types = lodash_1.castArray(types);
    let pass = false;
    const actualType = typeof value;
    let actualMsg = actualType;
    let expectedTypeMsg = '';
    const last = types.length - 1;
    types.forEach((type, i) => {
        pass = pass || type.predicate(value, actualType);
        if (type.getActualValueMsg)
            actualMsg = type.getActualValueMsg(value, actualType);
        if (i === 0)
            expectedTypeMsg += type.name;
        else
            expectedTypeMsg += (i === last ? ' or ' + getIndefiniteArticle(type.name) + ' ' : ', ') + type.name;
    });
    if (!pass) {
        throw callsiteName ?
            new _1.APIError(callsiteName, types_1.RUNTIME_ERRORS.invalidValueType, what, expectedTypeMsg, actualMsg) :
            new _1.GeneralError(types_1.RUNTIME_ERRORS.invalidValueType, what, expectedTypeMsg, actualMsg);
    }
}
exports.assertType = assertType;
//# sourceMappingURL=data:application/json;base64,