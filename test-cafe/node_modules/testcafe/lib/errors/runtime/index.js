"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserConnectionError = exports.TimeoutError = exports.ReporterPluginError = exports.CompositeError = exports.ClientFunctionAPIError = exports.APIError = exports.TestCompilationError = exports.GeneralError = void 0;
const callsite_record_1 = require("callsite-record");
const templates_1 = __importDefault(require("./templates"));
const create_stack_filter_1 = __importDefault(require("../create-stack-filter"));
const get_callsite_1 = require("../get-callsite");
const render_template_1 = __importDefault(require("../../utils/render-template"));
const render_callsite_sync_1 = __importDefault(require("../../utils/render-callsite-sync"));
const types_1 = require("../types");
const ERROR_SEPARATOR = '\n\n';
class ProcessTemplateInstruction {
    constructor(processFn) {
        this.processFn = processFn;
    }
}
// Errors
class GeneralError extends Error {
    constructor(...args) {
        const code = args.shift();
        const template = templates_1.default[code];
        super(render_template_1.default(template, ...args));
        Object.assign(this, { code, data: args });
        Error.captureStackTrace(this, GeneralError);
    }
    static isGeneralError(arg) {
        return arg instanceof GeneralError;
    }
}
exports.GeneralError = GeneralError;
class TestCompilationError extends Error {
    constructor(originalError) {
        const template = templates_1.default[types_1.RUNTIME_ERRORS.cannotPrepareTestsDueToError];
        const errorMessage = originalError.toString();
        super(render_template_1.default(template, errorMessage));
        Object.assign(this, {
            code: types_1.RUNTIME_ERRORS.cannotPrepareTestsDueToError,
            data: [errorMessage]
        });
        // NOTE: stack includes message as well.
        this.stack = render_template_1.default(template, originalError.stack);
    }
}
exports.TestCompilationError = TestCompilationError;
class APIError extends Error {
    constructor(methodName, code, ...args) {
        let template = templates_1.default[code];
        template = APIError._prepareTemplateAndArgsIfNecessary(template, args);
        const rawMessage = render_template_1.default(template, ...args);
        super(render_template_1.default(templates_1.default[types_1.RUNTIME_ERRORS.cannotPrepareTestsDueToError], rawMessage));
        Object.assign(this, { code, data: args });
        // NOTE: `rawMessage` is used in error substitution if it occurs in test run.
        this.rawMessage = rawMessage;
        this.callsite = get_callsite_1.getCallsiteForMethod(methodName);
        // NOTE: We need property getters here because callsite can be replaced by an external code.
        // See https://github.com/DevExpress/testcafe/blob/v1.0.0/src/compiler/test-file/formats/raw.js#L22
        // Also we can't use an ES6 getter for the 'stack' property, because it will create a getter on the class prototype
        // that cannot override the instance property created by the Error parent class.
        Object.defineProperties(this, {
            'stack': {
                get: () => this._createStack(callsite_record_1.renderers.noColor)
            },
            'coloredStack': {
                get: () => this._createStack(callsite_record_1.renderers.default)
            }
        });
    }
    _createStack(renderer) {
        const renderedCallsite = render_callsite_sync_1.default(this.callsite, {
            renderer: renderer,
            stackFilter: create_stack_filter_1.default(Error.stackTraceLimit)
        });
        if (!renderedCallsite)
            return this.message;
        return this.message + ERROR_SEPARATOR + renderedCallsite;
    }
    static _prepareTemplateAndArgsIfNecessary(template, args) {
        const lastArg = args.pop();
        if (lastArg instanceof ProcessTemplateInstruction)
            template = lastArg.processFn(template);
        else
            args.push(lastArg);
        return template;
    }
}
exports.APIError = APIError;
class ClientFunctionAPIError extends APIError {
    constructor(methodName, instantiationCallsiteName, code, ...args) {
        args.push(new ProcessTemplateInstruction(template => template.replace(/\{#instantiationCallsiteName\}/g, instantiationCallsiteName)));
        super(methodName, code, ...args);
    }
}
exports.ClientFunctionAPIError = ClientFunctionAPIError;
class CompositeError extends Error {
    constructor(errors) {
        super(errors.map(({ message }) => message).join(ERROR_SEPARATOR));
        this.stack = errors.map(({ stack }) => stack).join(ERROR_SEPARATOR);
        this.code = types_1.RUNTIME_ERRORS.compositeArgumentsError;
    }
}
exports.CompositeError = CompositeError;
class ReporterPluginError extends GeneralError {
    constructor({ name, method, originalError }) {
        const code = types_1.RUNTIME_ERRORS.uncaughtErrorInReporter;
        super(code, name, method, originalError.stack);
    }
}
exports.ReporterPluginError = ReporterPluginError;
class TimeoutError extends GeneralError {
    constructor() {
        super(types_1.RUNTIME_ERRORS.timeLimitedPromiseTimeoutExpired);
    }
}
exports.TimeoutError = TimeoutError;
class BrowserConnectionError extends GeneralError {
    constructor(...args) {
        super(types_1.RUNTIME_ERRORS.browserConnectionError, ...args);
    }
}
exports.BrowserConnectionError = BrowserConnectionError;
//# sourceMappingURL=data:application/json;base64,