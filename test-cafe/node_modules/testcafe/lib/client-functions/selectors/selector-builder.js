"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const dedent_1 = __importDefault(require("dedent"));
const client_function_builder_1 = __importDefault(require("../client-function-builder"));
const replicator_1 = require("../replicator");
const runtime_1 = require("../../errors/runtime");
const builder_symbol_1 = __importDefault(require("../builder-symbol"));
const types_1 = require("../../errors/types");
const type_assertions_1 = require("../../errors/runtime/type-assertions");
const observation_1 = require("../../test-run/commands/observation");
const define_lazy_property_1 = __importDefault(require("../../utils/define-lazy-property"));
const add_api_1 = require("./add-api");
const create_snapshot_methods_1 = __importDefault(require("./create-snapshot-methods"));
const prepare_api_args_1 = __importDefault(require("./prepare-api-args"));
const return_single_prop_mode_1 = __importDefault(require("../return-single-prop-mode"));
const selector_api_execution_mode_1 = __importDefault(require("../selector-api-execution-mode"));
class SelectorBuilder extends client_function_builder_1.default {
    constructor(fn, options, callsiteNames) {
        const apiFn = options && options.apiFn;
        const apiFnID = options && options.apiFnID;
        const builderFromSelector = fn && fn[builder_symbol_1.default];
        const builderFromPromiseOrSnapshot = fn && fn.selector && fn.selector[builder_symbol_1.default];
        let builder = builderFromSelector || builderFromPromiseOrSnapshot;
        builder = builder instanceof SelectorBuilder ? builder : null;
        if (builder) {
            fn = builder.fn;
            if (options === void 0 || typeof options === 'object')
                options = lodash_1.merge({}, builder.options, options, { sourceSelectorBuilder: builder });
        }
        super(fn, options, callsiteNames);
        if (!this.options.apiFnChain) {
            const fnType = typeof this.fn;
            let item = fnType === 'string' ? `'${this.fn}'` : `[${fnType}]`;
            item = `Selector(${item})`;
            this.options.apiFn = item;
            this.options.apiFnChain = [item];
        }
        if (apiFn)
            this.options.apiFnChain.push(apiFn);
        this.options.apiFnID = typeof apiFnID === 'number' ? apiFnID : this.options.apiFnChain.length - 1;
    }
    _getCompiledFnCode() {
        // OPTIMIZATION: if selector was produced from another selector and
        // it has same dependencies as source selector, then we can
        // avoid recompilation and just re-use already compiled code.
        const hasSameDependenciesAsSourceSelector = this.options.sourceSelectorBuilder &&
            this.options.sourceSelectorBuilder.options.dependencies ===
                this.options.dependencies;
        if (hasSameDependenciesAsSourceSelector)
            return this.options.sourceSelectorBuilder.compiledFnCode;
        const code = typeof this.fn === 'string' ?
            `(function(){return document.querySelectorAll(${JSON.stringify(this.fn)});});` :
            super._getCompiledFnCode();
        if (code) {
            return dedent_1.default(`(function(){
                    var __f$=${code};
                    return function(){
                        var args           = __dependencies$.boundArgs || arguments;
                        var selectorFilter = window['%testCafeSelectorFilter%'];

                        var nodes = __f$.apply(this, args);
                        nodes     = selectorFilter.cast(nodes);

                        if (!nodes.length && !selectorFilter.error)
                            selectorFilter.error = __dependencies$.apiInfo.apiFnID;

                        return selectorFilter.filter(nodes, __dependencies$.filterOptions, __dependencies$.apiInfo);
                    };
                 })();`);
        }
        return null;
    }
    _createInvalidFnTypeError() {
        return new runtime_1.ClientFunctionAPIError(this.callsiteNames.instantiation, this.callsiteNames.instantiation, types_1.RUNTIME_ERRORS.selectorInitializedWithWrongType, typeof this.fn);
    }
    _executeCommand(args, testRun, callsite) {
        const resultPromise = super._executeCommand(args, testRun, callsite);
        this._addBoundArgsSelectorGetter(resultPromise, args);
        // OPTIMIZATION: use buffer function as selector not to trigger lazy property ahead of time
        add_api_1.addAPI(resultPromise, () => resultPromise.selector, SelectorBuilder, this.options.customDOMProperties, this.options.customMethods);
        return resultPromise;
    }
    _getSourceSelectorBuilderApiFnID() {
        let selectorAncestor = this;
        while (selectorAncestor.options.sourceSelectorBuilder)
            selectorAncestor = selectorAncestor.options.sourceSelectorBuilder;
        return selectorAncestor.options.apiFnID;
    }
    getFunctionDependencies() {
        const dependencies = super.getFunctionDependencies();
        const { filterVisible, filterHidden, counterMode, collectionMode, getVisibleValueMode, index, customDOMProperties, customMethods, apiFnChain, boundArgs } = this.options;
        return lodash_1.merge({}, dependencies, {
            filterOptions: {
                filterVisible,
                filterHidden,
                counterMode,
                collectionMode,
                index: lodash_1.isNil(index) ? null : index,
                getVisibleValueMode
            },
            apiInfo: {
                apiFnChain,
                apiFnID: this._getSourceSelectorBuilderApiFnID()
            },
            boundArgs,
            customDOMProperties,
            customMethods
        });
    }
    _createTestRunCommand(encodedArgs, encodedDependencies) {
        return new observation_1.ExecuteSelectorCommand({
            instantiationCallsiteName: this.callsiteNames.instantiation,
            fnCode: this.compiledFnCode,
            args: encodedArgs,
            dependencies: encodedDependencies,
            needError: this.options.needError,
            apiFnChain: this.options.apiFnChain,
            visibilityCheck: !!this.options.visibilityCheck,
            timeout: this.options.timeout
        });
    }
    _validateOptions(options) {
        super._validateOptions(options);
        if (!lodash_1.isNil(options.visibilityCheck))
            type_assertions_1.assertType(type_assertions_1.is.boolean, this.callsiteNames.instantiation, '"visibilityCheck" option', options.visibilityCheck);
        if (!lodash_1.isNil(options.timeout))
            type_assertions_1.assertType(type_assertions_1.is.nonNegativeNumber, this.callsiteNames.instantiation, '"timeout" option', options.timeout);
    }
    _getReplicatorTransforms() {
        const transforms = super._getReplicatorTransforms();
        transforms.push(new replicator_1.SelectorNodeTransform());
        return transforms;
    }
    _addBoundArgsSelectorGetter(obj, selectorArgs) {
        define_lazy_property_1.default(obj, 'selector', () => {
            const builder = new SelectorBuilder(this.getFunction(), { boundArgs: selectorArgs });
            return builder.getFunction();
        });
    }
    _decorateFunction(selectorFn) {
        super._decorateFunction(selectorFn);
        add_api_1.addAPI(selectorFn, () => selectorFn, SelectorBuilder, this.options.customDOMProperties, this.options.customMethods, this._getObservedCallsites());
    }
    _getClientFnWithOverriddenOptions(options) {
        const apiFn = prepare_api_args_1.default('with', options);
        const previousSelectorID = this.options.apiFnChain.length - 1;
        return super._getClientFnWithOverriddenOptions(Object.assign(options, { apiFn, apiFnID: previousSelectorID }));
    }
    _processResult(result, selectorArgs) {
        const snapshot = super._processResult(result, selectorArgs);
        if (snapshot && !return_single_prop_mode_1.default(this.options)) {
            this._addBoundArgsSelectorGetter(snapshot, selectorArgs);
            create_snapshot_methods_1.default(snapshot);
            if (this.options.customMethods)
                add_api_1.addCustomMethods(snapshot, () => snapshot.selector, SelectorBuilder, this.options.customMethods);
            if (selector_api_execution_mode_1.default.isSync) {
                add_api_1.addAPI(snapshot, () => snapshot.selector, SelectorBuilder, this.options.customDOMProperties, this.options.customMethods, this._getObservedCallsites(), true);
            }
        }
        return snapshot;
    }
}
exports.default = SelectorBuilder;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,