"use strict";
// -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------
Object.defineProperty(exports, "__esModule", { value: true });
const NATIVE_METHODS_PROPERTY_NAME = '_nativeMethods';
class BrowserConsoleMessages {
    constructor(data, nativeMethods) {
        const resultNativeMethods = this._ensureNativeMethods(nativeMethods);
        resultNativeMethods.objectDefineProperty(this, NATIVE_METHODS_PROPERTY_NAME, { value: resultNativeMethods });
        this.concat(data);
    }
    _ensureNativeMethods(nativeMethods) {
        return nativeMethods || {
            objectKeys: Object.keys,
            arrayForEach: Array.prototype.forEach,
            arrayConcat: Array.prototype.concat,
            arraySlice: Array.prototype.slice,
            objectDefineProperty: Object.defineProperty
        };
    }
    _getWindowIds(consoleMessages) {
        return this[NATIVE_METHODS_PROPERTY_NAME].objectKeys(consoleMessages);
    }
    _copyArray(array) {
        return this[NATIVE_METHODS_PROPERTY_NAME].arraySlice.call(array);
    }
    _concatArrays(array, anotherArray) {
        return this[NATIVE_METHODS_PROPERTY_NAME].arrayConcat.call(array, anotherArray);
    }
    ensureMessageContainer(windowId) {
        if (this[windowId])
            return;
        this[windowId] = {
            log: [],
            info: [],
            warn: [],
            error: []
        };
    }
    concat(consoleMessages) {
        if (!consoleMessages)
            return this;
        const windowIds = this._getWindowIds(consoleMessages);
        this[NATIVE_METHODS_PROPERTY_NAME].arrayForEach.call(windowIds, windowId => {
            this.ensureMessageContainer(windowId);
            this[windowId].log = this._concatArrays(this[windowId].log, consoleMessages[windowId].log);
            this[windowId].info = this._concatArrays(this[windowId].info, consoleMessages[windowId].info);
            this[windowId].warn = this._concatArrays(this[windowId].warn, consoleMessages[windowId].warn);
            this[windowId].error = this._concatArrays(this[windowId].error, consoleMessages[windowId].error);
        });
        return this;
    }
    addMessage(type, msg, windowId) {
        this.ensureMessageContainer(windowId);
        this[windowId][type].push(msg);
    }
    getCopy() {
        const copy = {};
        const windowIds = this._getWindowIds(this);
        this[NATIVE_METHODS_PROPERTY_NAME].arrayForEach.call(windowIds, windowId => {
            copy[windowId] = {
                log: this._copyArray(this[windowId].log),
                info: this._copyArray(this[windowId].info),
                warn: this._copyArray(this[windowId].warn),
                error: this._copyArray(this[windowId].error)
            };
        });
        return copy;
    }
}
exports.default = BrowserConsoleMessages;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvd3Nlci1jb25zb2xlLW1lc3NhZ2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Rlc3QtcnVuL2Jyb3dzZXItY29uc29sZS1tZXNzYWdlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsZ0VBQWdFO0FBQ2hFLGdFQUFnRTtBQUNoRSwrQ0FBK0M7QUFDL0MsZ0VBQWdFOztBQUVoRSxNQUFNLDRCQUE0QixHQUFHLGdCQUFnQixDQUFDO0FBRXRELE1BQXFCLHNCQUFzQjtJQUN2QyxZQUFhLElBQUksRUFBRSxhQUFhO1FBQzVCLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRXJFLG1CQUFtQixDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSw0QkFBNEIsRUFBRSxFQUFFLEtBQUssRUFBRSxtQkFBbUIsRUFBRSxDQUFDLENBQUM7UUFFN0csSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRUQsb0JBQW9CLENBQUUsYUFBYTtRQUMvQixPQUFPLGFBQWEsSUFBSTtZQUNwQixVQUFVLEVBQVksTUFBTSxDQUFDLElBQUk7WUFDakMsWUFBWSxFQUFVLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBTztZQUM3QyxXQUFXLEVBQVcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNO1lBQzVDLFVBQVUsRUFBWSxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUs7WUFDM0Msb0JBQW9CLEVBQUUsTUFBTSxDQUFDLGNBQWM7U0FDOUMsQ0FBQztJQUNOLENBQUM7SUFFRCxhQUFhLENBQUUsZUFBZTtRQUMxQixPQUFPLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRUQsVUFBVSxDQUFFLEtBQUs7UUFDYixPQUFPLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJ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LENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQzthQUMvQyxDQUFDO1FBQ04sQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0NBQ0o7QUFuRkQseUNBbUZDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gV0FSTklORzogdGhpcyBmaWxlIGlzIHVzZWQgYnkgYm90aCB0aGUgY2xpZW50IGFuZCB0aGUgc2VydmVyLlxuLy8gRG8gbm90IHVzZSBhbnkgYnJvd3NlciBvciBub2RlLXNwZWNpZmljIEFQSSFcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgTkFUSVZFX01FVEhPRFNfUFJPUEVSVFlfTkFNRSA9ICdfbmF0aXZlTWV0aG9kcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyb3dzZXJDb25zb2xlTWVzc2FnZXMge1xuICAgIGNvbnN0cnVjdG9yIChkYXRhLCBuYXRpdmVNZXRob2RzKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdE5hdGl2ZU1ldGhvZHMgPSB0aGlzLl9lbnN1cmVOYXRpdmVNZXRob2RzKG5hdGl2ZU1ldGhvZHMpO1xuXG4gICAgICAgIHJlc3VsdE5hdGl2ZU1ldGhvZHMub2JqZWN0RGVmaW5lUHJvcGVydHkodGhpcywgTkFUSVZFX01FVEhPRFNfUFJPUEVSVFlfTkFNRSwgeyB2YWx1ZTogcmVzdWx0TmF0aXZlTWV0aG9kcyB9KTtcblxuICAgICAgICB0aGlzLmNvbmNhdChkYXRhKTtcbiAgICB9XG5cbiAgICBfZW5zdXJlTmF0aXZlTWV0aG9kcyAobmF0aXZlTWV0aG9kcykge1xuICAgICAgICByZXR1cm4gbmF0aXZlTWV0aG9kcyB8fCB7XG4gICAgICAgICAgICBvYmplY3RLZXlzOiAgICAgICAgICAgT2JqZWN0LmtleXMsXG4gICAgICAgICAgICBhcnJheUZvckVhY2g6ICAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2gsXG4gICAgICAgICAgICBhcnJheUNvbmNhdDogICAgICAgICAgQXJyYXkucHJvdG90eXBlLmNvbmNhdCxcbiAgICAgICAgICAgIGFycmF5U2xpY2U6ICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UsXG4gICAgICAgICAgICBvYmplY3REZWZpbmVQcm9wZXJ0eTogT2JqZWN0LmRlZmluZVByb3BlcnR5XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgX2dldFdpbmRvd0lkcyAoY29uc29sZU1lc3NhZ2VzKSB7XG4gICAgICAgIHJldHVybiB0aGlzW05BVElWRV9NRVRIT0RTX1BST1BFUlRZX05BTUVdLm9iamVjdEtleXMoY29uc29sZU1lc3NhZ2VzKTtcbiAgICB9XG5cbiAgICBfY29weUFycmF5IChhcnJheSkge1xuICAgICAgICByZXR1cm4gdGhpc1tOQVRJVkVfTUVUSE9EU19QUk9QRVJUWV9OQU1FXS5hcnJheVNsaWNlLmNhbGwoYXJyYXkpO1xuICAgIH1cblxuICAgIF9jb25jYXRBcnJheXMgKGFycmF5LCBhbm90aGVyQXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbTkFUSVZFX01FVEhPRFNfUFJPUEVSVFlfTkFNRV0uYXJyYXlDb25jYXQuY2FsbChhcnJheSwgYW5vdGhlckFycmF5KTtcbiAgICB9XG5cbiAgICBlbnN1cmVNZXNzYWdlQ29udGFpbmVyICh3aW5kb3dJZCkge1xuICAgICAgICBpZiAodGhpc1t3aW5kb3dJZF0pXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgdGhpc1t3aW5kb3dJZF0gPSB7XG4gICAgICAgICAgICBsb2c6ICAgW10sXG4gICAgICAgICAgICBpbmZvOiAgW10sXG4gICAgICAgICAgICB3YXJuOiAgW10sXG4gICAgICAgICAgICBlcnJvcjogW11cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25jYXQgKGNvbnNvbGVNZXNzYWdlcykge1xuICAgICAgICBpZiAoIWNvbnNvbGVNZXNzYWdlcylcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIGNvbnN0IHdpbmRvd0lkcyA9IHRoaXMuX2dldFdpbmRvd0lkcyhjb25zb2xlTWVzc2FnZXMpO1xuXG4gICAgICAgIHRoaXNbTkFUSVZFX01FVEhPRFNfUFJPUEVSVFlfTkFNRV0uYXJyYXlGb3JFYWNoLmNhbGwod2luZG93SWRzLCB3aW5kb3dJZCA9PiB7XG4gICAgICAgICAgICB0aGlzLmVuc3VyZU1lc3NhZ2VDb250YWluZXIod2luZG93SWQpO1xuXG4gICAgICAgICAgICB0aGlzW3dpbmRvd0lkXS5sb2cgICA9IHRoaXMuX2NvbmNhdEFycmF5cyh0aGlzW3dpbmRvd0lkXS5sb2csIGNvbnNvbGVNZXNzYWdlc1t3aW5kb3dJZF0ubG9nKTtcbiAgICAgICAgICAgIHRoaXNbd2luZG93SWRdLmluZm8gID0gdGhpcy5fY29uY2F0QXJyYXlzKHRoaXNbd2luZG93SWRdLmluZm8sIGNvbnNvbGVNZXNzYWdlc1t3aW5kb3dJZF0uaW5mbyk7XG4gICAgICAgICAgICB0aGlzW3dpbmRvd0lkXS53YXJuICA9IHRoaXMuX2NvbmNhdEFycmF5cyh0aGlzW3dpbmRvd0lkXS53YXJuLCBjb25zb2xlTWVzc2FnZXNbd2luZG93SWRdLndhcm4pO1xuICAgICAgICAgICAgdGhpc1t3aW5kb3dJZF0uZXJyb3IgPSB0aGlzLl9jb25jYXRBcnJheXModGhpc1t3aW5kb3dJZF0uZXJyb3IsIGNvbnNvbGVNZXNzYWdlc1t3aW5kb3dJZF0uZXJyb3IpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBhZGRNZXNzYWdlICh0eXBlLCBtc2csIHdpbmRvd0lkKSB7XG4gICAgICAgIHRoaXMuZW5zdXJlTWVzc2FnZUNvbnRhaW5lcih3aW5kb3dJZCk7XG5cbiAgICAgICAgdGhpc1t3aW5kb3dJZF1bdHlwZV0ucHVzaChtc2cpO1xuICAgIH1cblxuICAgIGdldENvcHkgKCkge1xuICAgICAgICBjb25zdCBjb3B5ID0ge307XG5cbiAgICAgICAgY29uc3Qgd2luZG93SWRzID0gdGhpcy5fZ2V0V2luZG93SWRzKHRoaXMpO1xuXG4gICAgICAgIHRoaXNbTkFUSVZFX01FVEhPRFNfUFJPUEVSVFlfTkFNRV0uYXJyYXlGb3JFYWNoLmNhbGwod2luZG93SWRzLCB3aW5kb3dJZCA9PiB7XG4gICAgICAgICAgICBjb3B5W3dpbmRvd0lkXSA9IHtcbiAgICAgICAgICAgICAgICBsb2c6ICAgdGhpcy5fY29weUFycmF5KHRoaXNbd2luZG93SWRdLmxvZyksXG4gICAgICAgICAgICAgICAgaW5mbzogIHRoaXMuX2NvcHlBcnJheSh0aGlzW3dpbmRvd0lkXS5pbmZvKSxcbiAgICAgICAgICAgICAgICB3YXJuOiAgdGhpcy5fY29weUFycmF5KHRoaXNbd2luZG93SWRdLndhcm4pLFxuICAgICAgICAgICAgICAgIGVycm9yOiB0aGlzLl9jb3B5QXJyYXkodGhpc1t3aW5kb3dJZF0uZXJyb3IpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gY29weTtcbiAgICB9XG59XG4iXX0=