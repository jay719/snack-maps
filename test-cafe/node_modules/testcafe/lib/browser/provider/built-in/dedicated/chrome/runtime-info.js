"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const endpoint_utils_1 = require("endpoint-utils");
const config_1 = __importDefault(require("./config"));
const create_temp_profile_1 = __importDefault(require("./create-temp-profile"));
const is_docker_1 = __importDefault(require("is-docker"));
class ChromeRuntimeInfo {
    constructor(configString) {
        this.config = config_1.default(configString);
        this.tempProfileDir = null;
        this.cdpPort = this.config.cdpPort;
        this.inDocker = is_docker_1.default();
    }
    async createTempProfile(proxyHostName, disableMultipleWindows) {
        return await create_temp_profile_1.default(proxyHostName, disableMultipleWindows);
    }
    static async create(proxyHostName, configString, disableMultipleWindows) {
        const runtimeInfo = new this(configString);
        if (!runtimeInfo.config.userProfile)
            runtimeInfo.tempProfileDir = await runtimeInfo.createTempProfile(proxyHostName, disableMultipleWindows);
        if (!runtimeInfo.cdpPort && !runtimeInfo.config.userProfile)
            runtimeInfo.cdpPort = await endpoint_utils_1.getFreePort();
        return runtimeInfo;
    }
}
exports.default = ChromeRuntimeInfo;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVudGltZS1pbmZvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2Jyb3dzZXIvcHJvdmlkZXIvYnVpbHQtaW4vZGVkaWNhdGVkL2Nocm9tZS9ydW50aW1lLWluZm8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxtREFBNkM7QUFDN0Msc0RBQWlDO0FBQ2pDLGdGQUFzRDtBQUN0RCwwREFBaUM7QUFJakMsTUFBcUIsaUJBQWlCO0lBT2xDLFlBQXVCLFlBQW9CO1FBQ3ZDLElBQUksQ0FBQyxNQUFNLEdBQVcsZ0JBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztRQUMzQixJQUFJLENBQUMsT0FBTyxHQUFVLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQzFDLElBQUksQ0FBQyxRQUFRLEdBQVMsbUJBQVEsRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUFFUyxLQUFLLENBQUMsaUJBQWlCLENBQUUsYUFBcUIsRUFBRSxzQkFBK0I7UUFDckYsT0FBTyxNQUFNLDZCQUFpQixDQUFDLGFBQWEsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFTSxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBRSxhQUFxQixFQUFFLFlBQW9CLEVBQUUsc0JBQStCO1FBQ3BHLE1BQU0sV0FBVyxHQUFHLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRTNDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFdBQVc7WUFDL0IsV0FBVyxDQUFDLGNBQWMsR0FBRyxNQUFNLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztRQUU1RyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsV0FBVztZQUN2RCxXQUFXLENBQUMsT0FBTyxHQUFHLE1BQU0sNEJBQVcsRUFBRSxDQUFDO1FBRTlDLE9BQU8sV0FBVyxDQUFDO0lBQ3ZCLENBQUM7Q0FDSjtBQTdCRCxvQ0E2QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRGcmVlUG9ydCB9IGZyb20gJ2VuZHBvaW50LXV0aWxzJztcbmltcG9ydCBnZXRDb25maWcgZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IGNyZWF0ZVRlbXBQcm9maWxlIGZyb20gJy4vY3JlYXRlLXRlbXAtcHJvZmlsZSc7XG5pbXBvcnQgaXNEb2NrZXIgZnJvbSAnaXMtZG9ja2VyJztcbmltcG9ydCBUZW1wRGlyZWN0b3J5IGZyb20gJy4uLy4uLy4uLy4uLy4uL3V0aWxzL3RlbXAtZGlyZWN0b3J5JztcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENocm9tZVJ1bnRpbWVJbmZvIHtcbiAgICBwdWJsaWMgY29uZmlnOiBDb25maWc7XG4gICAgcHVibGljIHRlbXBQcm9maWxlRGlyOiBudWxsIHwgVGVtcERpcmVjdG9yeTtcbiAgICBwdWJsaWMgY2RwUG9ydDogbnVtYmVyO1xuICAgIHB1YmxpYyBpbkRvY2tlcjogYm9vbGVhbjtcbiAgICBwdWJsaWMgYnJvd3Nlck5hbWU/OiBzdHJpbmc7XG5cbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IgKGNvbmZpZ1N0cmluZzogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuY29uZmlnICAgICAgICAgPSBnZXRDb25maWcoY29uZmlnU3RyaW5nKTtcbiAgICAgICAgdGhpcy50ZW1wUHJvZmlsZURpciA9IG51bGw7XG4gICAgICAgIHRoaXMuY2RwUG9ydCAgICAgICAgPSB0aGlzLmNvbmZpZy5jZHBQb3J0O1xuICAgICAgICB0aGlzLmluRG9ja2VyICAgICAgID0gaXNEb2NrZXIoKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgYXN5bmMgY3JlYXRlVGVtcFByb2ZpbGUgKHByb3h5SG9zdE5hbWU6IHN0cmluZywgZGlzYWJsZU11bHRpcGxlV2luZG93czogYm9vbGVhbik6IFByb21pc2U8VGVtcERpcmVjdG9yeT4ge1xuICAgICAgICByZXR1cm4gYXdhaXQgY3JlYXRlVGVtcFByb2ZpbGUocHJveHlIb3N0TmFtZSwgZGlzYWJsZU11bHRpcGxlV2luZG93cyk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBhc3luYyBjcmVhdGUgKHByb3h5SG9zdE5hbWU6IHN0cmluZywgY29uZmlnU3RyaW5nOiBzdHJpbmcsIGRpc2FibGVNdWx0aXBsZVdpbmRvd3M6IGJvb2xlYW4pOiBQcm9taXNlPENocm9tZVJ1bnRpbWVJbmZvPiB7XG4gICAgICAgIGNvbnN0IHJ1bnRpbWVJbmZvID0gbmV3IHRoaXMoY29uZmlnU3RyaW5nKTtcblxuICAgICAgICBpZiAoIXJ1bnRpbWVJbmZvLmNvbmZpZy51c2VyUHJvZmlsZSlcbiAgICAgICAgICAgIHJ1bnRpbWVJbmZvLnRlbXBQcm9maWxlRGlyID0gYXdhaXQgcnVudGltZUluZm8uY3JlYXRlVGVtcFByb2ZpbGUocHJveHlIb3N0TmFtZSwgZGlzYWJsZU11bHRpcGxlV2luZG93cyk7XG5cbiAgICAgICAgaWYgKCFydW50aW1lSW5mby5jZHBQb3J0ICYmICFydW50aW1lSW5mby5jb25maWcudXNlclByb2ZpbGUpXG4gICAgICAgICAgICBydW50aW1lSW5mby5jZHBQb3J0ID0gYXdhaXQgZ2V0RnJlZVBvcnQoKTtcblxuICAgICAgICByZXR1cm4gcnVudGltZUluZm87XG4gICAgfVxufVxuIl19