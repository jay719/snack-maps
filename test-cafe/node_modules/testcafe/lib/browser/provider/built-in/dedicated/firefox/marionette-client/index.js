"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const net_1 = require("net");
const promisify_event_1 = __importDefault(require("promisify-event"));
const events_1 = __importDefault(require("events"));
const delay_1 = __importDefault(require("../../../../../../utils/delay"));
const client_functions_1 = require("../../../../utils/client-functions");
const commands_1 = __importDefault(require("./commands"));
const CONNECTION_TIMEOUT = 30000;
const CONNECTION_RETRY_DELAY = 300;
const MAX_RESIZE_RETRY_COUNT = 2;
const HEADER_SEPARATOR = ':';
module.exports = class MarionetteClient {
    constructor(port = 2828, runtimeInfo, host = '127.0.0.1') {
        this.currentPacketNumber = 1;
        this.events = new events_1.default();
        this.port = port;
        this.host = host;
        this.socket = new net_1.Socket();
        this.buffer = Buffer.alloc(0);
        this.getPacketPromise = Promise.resolve();
        this.sendPacketPromise = Promise.resolve();
        this._runtimeInfo = runtimeInfo;
        this._windowHandles = {};
        this.protocolInfo = {
            applicationType: '',
            marionetteProtocol: '',
        };
        this.sessionInfo = null;
    }
    get activeWindowId() {
        return this._runtimeInfo.activeWindowId;
    }
    async _attemptToConnect(port, host) {
        this.socket.connect(port, host);
        const connectionPromise = Promise.race([
            promisify_event_1.default(this.socket, 'connect'),
            promisify_event_1.default(this.socket, 'error')
        ]);
        return await connectionPromise
            .then(() => true)
            .catch(() => {
            this.socket.removeAllListeners('connect');
            return delay_1.default(CONNECTION_RETRY_DELAY);
        });
    }
    async _connectSocket(port, host) {
        const connectionStartTime = Date.now();
        let connected = await this._attemptToConnect(port, host);
        while (!connected && Date.now() - connectionStartTime < CONNECTION_TIMEOUT)
            connected = await this._attemptToConnect(port, host);
        if (!connected)
            throw new Error('Unable to connect');
        this.socket.on('data', data => this._handleNewData(data));
    }
    async _writeSocket(message) {
        if (!this.socket.write(message))
            await promisify_event_1.default(this.socket, 'drain');
    }
    _handleNewData(data) {
        if (!data)
            return;
        this.buffer = Buffer.concat([this.buffer, data]);
        this.events.emit('new-data');
    }
    _getPacket() {
        this.getPacketPromise = this.getPacketPromise.then(async () => {
            let headerEndIndex = this.buffer.indexOf(HEADER_SEPARATOR);
            while (headerEndIndex < 0) {
                await promisify_event_1.default(this.events, 'new-data');
                headerEndIndex = this.buffer.indexOf(HEADER_SEPARATOR);
            }
            const packet = {
                length: NaN,
                body: null
            };
            packet.length = parseInt(this.buffer.toString('utf8', 0, headerEndIndex), 10) || 0;
            const bodyStartIndex = headerEndIndex + HEADER_SEPARATOR.length;
            const bodyEndIndex = bodyStartIndex + packet.length;
            if (packet.length) {
                while (this.buffer.length < bodyEndIndex)
                    await promisify_event_1.default(this.events, 'new-data');
                packet.body = JSON.parse(this.buffer.toString('utf8', bodyStartIndex, bodyEndIndex));
            }
            this.buffer = this.buffer.slice(bodyEndIndex);
            return packet;
        });
        return this.getPacketPromise;
    }
    _sendPacket(payload) {
        this.sendPacketPromise = this.sendPacketPromise.then(async () => {
            const body = [0, this.currentPacketNumber++, payload.command, payload.parameters];
            const serialized = JSON.stringify(body);
            const message = Buffer.byteLength(serialized, 'utf8') + HEADER_SEPARATOR + serialized;
            this._writeSocket(message);
        });
        return this.sendPacketPromise;
    }
    _throwMarionetteError(error) {
        throw new Error(`${error.error}${error.message ? ': ' + error.message : ''}`);
    }
    async _switchToWindow(windowHandle) {
        await this._getResponse({
            command: commands_1.default.switchToWindow,
            parameters: { handle: windowHandle }
        });
    }
    async _getActiveWindowHandle() {
        const windowHandles = await this._getResponse({
            command: commands_1.default.getWindowHandles
        });
        for (const handle of windowHandles) {
            await this._switchToWindow(handle);
            const title = await this._getResponse({ command: commands_1.default.getTitle });
            if (title.value.includes(this.activeWindowId))
                return handle;
        }
        return null;
    }
    async _ensureActiveWindow() {
        let handle = this._windowHandles[this.activeWindowId];
        if (handle) {
            await this._switchToWindow(handle);
            return;
        }
        handle = await this._getActiveWindowHandle();
        if (handle)
            this._windowHandles[this.activeWindowId] = handle;
    }
    async _request(packet) {
        await this._ensureActiveWindow();
        return this._getResponse(packet);
    }
    async _getResponse(packet) {
        const packetNumber = this.currentPacketNumber;
        await this._sendPacket(packet);
        let responsePacket = await this._getPacket();
        while (!responsePacket.body || responsePacket.body[1] !== packetNumber)
            responsePacket = await this._getPacket();
        if (responsePacket.body[2])
            this._throwMarionetteError(responsePacket.body[2]);
        return responsePacket.body[3];
    }
    async _getScreenshotRawData(fullPage = false) {
        return await this._request({
            command: commands_1.default.takeScreenshot,
            parameters: {
                full: fullPage,
                hash: false,
                scroll: false
            }
        });
    }
    async connect() {
        await this._connectSocket(this.port, this.host);
        const infoPacket = await this._getPacket();
        this.protocolInfo = {
            applicationType: infoPacket.body.applicationType,
            marionetteProtocol: infoPacket.body.marionetteProtocol
        };
        this.sessionInfo = await this._getResponse({ command: commands_1.default.newSession });
    }
    dispose() {
        this.socket.end();
        this.buffer = null;
    }
    async executeScript(code) {
        return await this._request({
            command: commands_1.default.executeScript,
            parameters: { script: `return (${code})()` }
        });
    }
    async getScreenshotData(fullPage) {
        const frameData = await this._getScreenshotRawData(fullPage);
        return Buffer.from(frameData.value, 'base64');
    }
    async setWindowSize(width, height) {
        let { value: pageRect } = await this.executeScript(client_functions_1.GET_WINDOW_DIMENSIONS_INFO_SCRIPT);
        let attemptCounter = 0;
        while (attemptCounter++ < MAX_RESIZE_RETRY_COUNT && (pageRect.width !== width || pageRect.height !== height)) {
            const currentRect = await this._request({ command: commands_1.default.getWindowRect });
            await this._request({
                command: commands_1.default.setWindowRect,
                parameters: {
                    x: currentRect.x,
                    y: currentRect.y,
                    width: width + (currentRect.width - pageRect.width),
                    height: height + (currentRect.height - pageRect.height)
                }
            });
            ({ value: pageRect } = await this.executeScript(client_functions_1.GET_WINDOW_DIMENSIONS_INFO_SCRIPT));
        }
    }
    async quit() {
        await this._request({ command: commands_1.default.quit });
    }
};
//# sourceMappingURL=data:application/json;base64,