"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const load_assets_1 = __importDefault(require("../../load-assets"));
const http_1 = require("../../utils/http");
const remotes_queue_1 = __importDefault(require("./remotes-queue"));
const service_routes_1 = __importDefault(require("./service-routes"));
class BrowserConnectionGateway {
    constructor(proxy, options) {
        this._connections = {};
        this._remotesQueue = new remotes_queue_1.default();
        // @ts-ignore Need to improve typings of the 'testcafe-hammerhead' module
        this.domain = proxy.server1Info.domain;
        this.connectUrl = `${this.domain}/browser/connect`;
        this.retryTestPages = options.retryTestPages;
        this._registerRoutes(proxy);
    }
    _dispatch(url, proxy, handler, method = 'GET') {
        // @ts-ignore Need to improve typings of the 'testcafe-hammerhead' module
        proxy[method](url, (req, res, serverInfo, params) => {
            const connection = this._connections[params.id];
            http_1.preventCaching(res);
            if (connection)
                handler(req, res, connection);
            else
                http_1.respond404(res);
        });
    }
    _registerRoutes(proxy) {
        const { idlePageScript, idlePageStyle, idlePageLogo, serviceWorkerScript } = load_assets_1.default();
        this._dispatch('/browser/connect/{id}', proxy, BrowserConnectionGateway._onConnection);
        this._dispatch('/browser/heartbeat/{id}', proxy, BrowserConnectionGateway._onHeartbeat);
        this._dispatch('/browser/idle/{id}', proxy, BrowserConnectionGateway._onIdle);
        this._dispatch('/browser/idle-forced/{id}', proxy, BrowserConnectionGateway._onIdleForced);
        this._dispatch('/browser/status/{id}', proxy, BrowserConnectionGateway._onStatusRequest);
        this._dispatch('/browser/status-done/{id}', proxy, BrowserConnectionGateway._onStatusRequestOnTestDone);
        this._dispatch('/browser/init-script/{id}', proxy, BrowserConnectionGateway._onInitScriptRequest);
        this._dispatch('/browser/init-script/{id}', proxy, BrowserConnectionGateway._onInitScriptResponse, 'POST');
        this._dispatch('/browser/active-window-id/{id}', proxy, BrowserConnectionGateway._onGetActiveWindowIdRequest);
        this._dispatch('/browser/active-window-id/{id}', proxy, BrowserConnectionGateway._onSetActiveWindowIdRequest, 'POST');
        proxy.GET(service_routes_1.default.connect, (req, res) => this._connectNextRemoteBrowser(req, res));
        proxy.GET(service_routes_1.default.connectWithTrailingSlash, (req, res) => this._connectNextRemoteBrowser(req, res));
        proxy.GET(service_routes_1.default.serviceWorker, { content: serviceWorkerScript, contentType: 'application/x-javascript' });
        proxy.GET(service_routes_1.default.assets.index, { content: idlePageScript, contentType: 'application/x-javascript' });
        proxy.GET(service_routes_1.default.assets.styles, { content: idlePageStyle, contentType: 'text/css' });
        proxy.GET(service_routes_1.default.assets.logo, { content: idlePageLogo, contentType: 'image/svg+xml' });
    }
    // Helpers
    static _ensureConnectionReady(res, connection) {
        if (!connection.isReady()) {
            http_1.respond500(res, 'The connection is not ready yet.');
            return false;
        }
        return true;
    }
    static _fetchRequestData(req, callback) {
        let data = '';
        req.on('data', chunk => {
            data += chunk;
        });
        req.on('end', () => {
            callback(data.toString());
        });
    }
    // Route handlers
    static _onConnection(req, res, connection) {
        if (connection.isReady())
            http_1.respond500(res, 'The connection is already established.');
        else {
            const userAgent = req.headers['user-agent'];
            connection.establish(userAgent);
            http_1.redirect(res, connection.idleUrl);
        }
    }
    static _onHeartbeat(req, res, connection) {
        if (BrowserConnectionGateway._ensureConnectionReady(res, connection)) {
            const status = connection.heartbeat();
            http_1.respondWithJSON(res, status);
        }
    }
    static _onIdle(req, res, connection) {
        if (BrowserConnectionGateway._ensureConnectionReady(res, connection))
            res.end(connection.renderIdlePage());
    }
    static async _onIdleForced(req, res, connection) {
        if (BrowserConnectionGateway._ensureConnectionReady(res, connection)) {
            const status = await connection.getStatus(true);
            http_1.redirect(res, status.url);
        }
    }
    static async _onStatusRequest(req, res, connection) {
        return BrowserConnectionGateway._onStatusRequestCore(req, res, connection, false);
    }
    static async _onStatusRequestOnTestDone(req, res, connection) {
        return BrowserConnectionGateway._onStatusRequestCore(req, res, connection, true);
    }
    static async _onStatusRequestCore(req, res, connection, isTestDone) {
        if (BrowserConnectionGateway._ensureConnectionReady(res, connection)) {
            const status = await connection.getStatus(isTestDone);
            http_1.respondWithJSON(res, status);
        }
    }
    static _onInitScriptRequest(req, res, connection) {
        if (BrowserConnectionGateway._ensureConnectionReady(res, connection)) {
            const script = connection.getInitScript();
            http_1.respondWithJSON(res, script);
        }
    }
    static _onInitScriptResponse(req, res, connection) {
        if (BrowserConnectionGateway._ensureConnectionReady(res, connection)) {
            BrowserConnectionGateway._fetchRequestData(req, data => {
                connection.handleInitScriptResult(data);
                res.end();
            });
        }
    }
    static _onGetActiveWindowIdRequest(req, res, connection) {
        if (BrowserConnectionGateway._ensureConnectionReady(res, connection)) {
            http_1.respondWithJSON(res, {
                activeWindowId: connection.activeWindowId
            });
        }
    }
    static _onSetActiveWindowIdRequest(req, res, connection) {
        if (BrowserConnectionGateway._ensureConnectionReady(res, connection)) {
            BrowserConnectionGateway._fetchRequestData(req, data => {
                const parsedData = JSON.parse(data);
                connection.activeWindowId = parsedData.windowId;
                http_1.respondWithJSON(res);
            });
        }
    }
    async _connectNextRemoteBrowser(req, res) {
        http_1.preventCaching(res);
        const remoteConnection = await this._remotesQueue.shift();
        if (remoteConnection)
            http_1.redirect(res, remoteConnection.url);
        else
            http_1.respond500(res, 'There are no available _connections to establish.');
    }
    // API
    startServingConnection(connection) {
        this._connections[connection.id] = connection;
        if (connection.browserInfo.providerName === 'remote')
            this._remotesQueue.add(connection);
    }
    stopServingConnection(connection) {
        delete this._connections[connection.id];
        if (connection.browserInfo.providerName === 'remote')
            this._remotesQueue.remove(connection);
    }
    async close() {
        for (const id in this._connections)
            await this._connections[id].close();
    }
}
exports.default = BrowserConnectionGateway;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,