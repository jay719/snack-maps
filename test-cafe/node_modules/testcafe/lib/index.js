"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const runtime_1 = require("./errors/runtime");
const types_1 = require("./errors/types");
const embedding_utils_1 = __importDefault(require("./embedding-utils"));
const exportable_lib_1 = __importDefault(require("./api/exportable-lib"));
const testcafe_configuration_1 = __importDefault(require("./configuration/testcafe-configuration"));
const option_names_1 = __importDefault(require("./configuration/option-names"));
const process_title_1 = __importDefault(require("./services/process-title"));
const lazyRequire = require('import-lazy')(require);
const TestCafe = lazyRequire('./testcafe');
const endpointUtils = lazyRequire('endpoint-utils');
const setupExitHook = lazyRequire('async-exit-hook');
// Validations
async function getValidHostname(hostname) {
    if (hostname) {
        const valid = await endpointUtils.isMyHostname(hostname);
        if (!valid)
            throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.invalidHostname, hostname);
    }
    else
        hostname = endpointUtils.getIPAddress();
    return hostname;
}
async function getValidPort(port) {
    if (port) {
        const isFree = await endpointUtils.isFreePort(port);
        if (!isFree)
            throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.portIsNotFree, port);
    }
    else
        port = await endpointUtils.getFreePort();
    return port;
}
// API
async function getConfiguration(args) {
    var _a;
    let configuration;
    if (args.length === 1 && typeof args[0] === 'object') {
        configuration = new testcafe_configuration_1.default((_a = args[0]) === null || _a === void 0 ? void 0 : _a.configFile);
        await configuration.init(args[0]);
    }
    else {
        const [hostname, port1, port2, ssl, developmentMode, retryTestPages, cache, configFile] = args;
        configuration = new testcafe_configuration_1.default(configFile);
        await configuration.init({
            hostname,
            port1,
            port2,
            ssl,
            developmentMode,
            retryTestPages,
            cache
        });
    }
    return configuration;
}
// API
async function createTestCafe(...args) {
    process.title = process_title_1.default.main;
    const configuration = await getConfiguration(args);
    const [hostname, port1, port2] = await Promise.all([
        getValidHostname(configuration.getOption(option_names_1.default.hostname)),
        getValidPort(configuration.getOption(option_names_1.default.port1)),
        getValidPort(configuration.getOption(option_names_1.default.port2))
    ]);
    configuration.mergeOptions({ hostname, port1, port2 });
    const testcafe = new TestCafe(configuration);
    setupExitHook(cb => testcafe.close().then(cb));
    return testcafe;
}
// Embedding utils
createTestCafe.embeddingUtils = embedding_utils_1.default;
// Common API
Object.keys(exportable_lib_1.default).forEach(key => {
    Object.defineProperty(createTestCafe, key, { get: () => exportable_lib_1.default[key] });
});
exports.default = createTestCafe;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw4Q0FBZ0Q7QUFDaEQsMENBQWdEO0FBQ2hELHdFQUErQztBQUMvQywwRUFBaUQ7QUFDakQsb0dBQTJFO0FBQzNFLGdGQUF3RDtBQUN4RCw2RUFBb0Q7QUFFcEQsTUFBTSxXQUFXLEdBQUssT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3RELE1BQU0sUUFBUSxHQUFRLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNoRCxNQUFNLGFBQWEsR0FBRyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUNwRCxNQUFNLGFBQWEsR0FBRyxXQUFXLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUVyRCxjQUFjO0FBQ2QsS0FBSyxVQUFVLGdCQUFnQixDQUFFLFFBQVE7SUFDckMsSUFBSSxRQUFRLEVBQUU7UUFDVixNQUFNLEtBQUssR0FBRyxNQUFNLGFBQWEsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFekQsSUFBSSxDQUFDLEtBQUs7WUFDTixNQUFNLElBQUksc0JBQVksQ0FBQyxzQkFBYyxDQUFDLGVBQWUsRUFBRSxRQUFRLENBQUMsQ0FBQztLQUN4RTs7UUFFRyxRQUFRLEdBQUcsYUFBYSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBRTVDLE9BQU8sUUFBUSxDQUFDO0FBQ3BCLENBQUM7QUFFRCxLQUFLLFVBQVUsWUFBWSxDQUFFLElBQUk7SUFDN0IsSUFBSSxJQUFJLEVBQUU7UUFDTixNQUFNLE1BQU0sR0FBRyxNQUFNLGFBQWEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFcEQsSUFBSSxDQUFDLE1BQU07WUFDUCxNQUFNLElBQUksc0JBQVksQ0FBQyxzQkFBYyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUNsRTs7UUFFRyxJQUFJLEdBQUcsTUFBTSxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUM7SUFFN0MsT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQztBQUVELE1BQU07QUFDTixLQUFLLFVBQVUsZ0JBQWdCLENBQUUsSUFBSTs7SUFDakMsSUFBSSxhQUFhLENBQUM7SUFFbEIsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLEVBQUU7UUFDbEQsYUFBYSxHQUFHLElBQUksZ0NBQXFCLE9BQUMsSUFBSSxDQUFDLENBQUMsQ0FBQywwQ0FBRSxVQUFVLENBQUMsQ0FBQztRQUUvRCxNQUFNLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDckM7U0FDSTtRQUNELE1BQU0sQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBRS9GLGFBQWEsR0FBRyxJQUFJLGdDQUFxQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXRELE1BQU0sYUFBYSxDQUFDLElBQUksQ0FBQztZQUNyQixRQUFRO1lBQ1IsS0FBSztZQUNMLEtBQUs7WUFDTCxHQUFHO1lBQ0gsZUFBZTtZQUNmLGNBQWM7WUFDZCxLQUFLO1NBQ1IsQ0FBQyxDQUFDO0tBQ047SUFFRCxPQUFPLGFBQWEsQ0FBQztBQUN6QixDQUFDO0FBRUQsTUFBTTtBQUNOLEtBQUssVUFBVSxjQUFjLENBQUUsR0FBRyxJQUFJO0lBQ2xDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsdUJBQVksQ0FBQyxJQUFJLENBQUM7SUFFbEMsTUFBTSxhQUFhLEdBQUcsTUFBTSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVuRCxNQUFNLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUM7UUFDL0MsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxzQkFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hFLFlBQVksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLHNCQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekQsWUFBWSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsc0JBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUM1RCxDQUFDLENBQUM7SUFFSCxhQUFhLENBQUMsWUFBWSxDQUFDLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBRXZELE1BQU0sUUFBUSxHQUFHLElBQUksUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBRTdDLGFBQWEsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUUvQyxPQUFPLFFBQVEsQ0FBQztBQUNwQixDQUFDO0FBRUQsa0JBQWtCO0FBQ2xCLGNBQWMsQ0FBQyxjQUFjLEdBQUcseUJBQWMsQ0FBQztBQUUvQyxhQUFhO0FBQ2IsTUFBTSxDQUFDLElBQUksQ0FBQyx3QkFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO0lBQ3JDLE1BQU0sQ0FBQyxjQUFjLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyx3QkFBYSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNsRixDQUFDLENBQUMsQ0FBQztBQUVILGtCQUFlLGNBQWMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdlbmVyYWxFcnJvciB9IGZyb20gJy4vZXJyb3JzL3J1bnRpbWUnO1xuaW1wb3J0IHsgUlVOVElNRV9FUlJPUlMgfSBmcm9tICcuL2Vycm9ycy90eXBlcyc7XG5pbXBvcnQgZW1iZWRkaW5nVXRpbHMgZnJvbSAnLi9lbWJlZGRpbmctdXRpbHMnO1xuaW1wb3J0IGV4cG9ydGFibGVMaWIgZnJvbSAnLi9hcGkvZXhwb3J0YWJsZS1saWInO1xuaW1wb3J0IFRlc3RDYWZlQ29uZmlndXJhdGlvbiBmcm9tICcuL2NvbmZpZ3VyYXRpb24vdGVzdGNhZmUtY29uZmlndXJhdGlvbic7XG5pbXBvcnQgT1BUSU9OX05BTUVTIGZyb20gJy4vY29uZmlndXJhdGlvbi9vcHRpb24tbmFtZXMnO1xuaW1wb3J0IFByb2Nlc3NUaXRsZSBmcm9tICcuL3NlcnZpY2VzL3Byb2Nlc3MtdGl0bGUnO1xuXG5jb25zdCBsYXp5UmVxdWlyZSAgID0gcmVxdWlyZSgnaW1wb3J0LWxhenknKShyZXF1aXJlKTtcbmNvbnN0IFRlc3RDYWZlICAgICAgPSBsYXp5UmVxdWlyZSgnLi90ZXN0Y2FmZScpO1xuY29uc3QgZW5kcG9pbnRVdGlscyA9IGxhenlSZXF1aXJlKCdlbmRwb2ludC11dGlscycpO1xuY29uc3Qgc2V0dXBFeGl0SG9vayA9IGxhenlSZXF1aXJlKCdhc3luYy1leGl0LWhvb2snKTtcblxuLy8gVmFsaWRhdGlvbnNcbmFzeW5jIGZ1bmN0aW9uIGdldFZhbGlkSG9zdG5hbWUgKGhvc3RuYW1lKSB7XG4gICAgaWYgKGhvc3RuYW1lKSB7XG4gICAgICAgIGNvbnN0IHZhbGlkID0gYXdhaXQgZW5kcG9pbnRVdGlscy5pc015SG9zdG5hbWUoaG9zdG5hbWUpO1xuXG4gICAgICAgIGlmICghdmFsaWQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgR2VuZXJhbEVycm9yKFJVTlRJTUVfRVJST1JTLmludmFsaWRIb3N0bmFtZSwgaG9zdG5hbWUpO1xuICAgIH1cbiAgICBlbHNlXG4gICAgICAgIGhvc3RuYW1lID0gZW5kcG9pbnRVdGlscy5nZXRJUEFkZHJlc3MoKTtcblxuICAgIHJldHVybiBob3N0bmFtZTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0VmFsaWRQb3J0IChwb3J0KSB7XG4gICAgaWYgKHBvcnQpIHtcbiAgICAgICAgY29uc3QgaXNGcmVlID0gYXdhaXQgZW5kcG9pbnRVdGlscy5pc0ZyZWVQb3J0KHBvcnQpO1xuXG4gICAgICAgIGlmICghaXNGcmVlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEdlbmVyYWxFcnJvcihSVU5USU1FX0VSUk9SUy5wb3J0SXNOb3RGcmVlLCBwb3J0KTtcbiAgICB9XG4gICAgZWxzZVxuICAgICAgICBwb3J0ID0gYXdhaXQgZW5kcG9pbnRVdGlscy5nZXRGcmVlUG9ydCgpO1xuXG4gICAgcmV0dXJuIHBvcnQ7XG59XG5cbi8vIEFQSVxuYXN5bmMgZnVuY3Rpb24gZ2V0Q29uZmlndXJhdGlvbiAoYXJncykge1xuICAgIGxldCBjb25maWd1cmF0aW9uO1xuXG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxICYmIHR5cGVvZiBhcmdzWzBdID09PSAnb2JqZWN0Jykge1xuICAgICAgICBjb25maWd1cmF0aW9uID0gbmV3IFRlc3RDYWZlQ29uZmlndXJhdGlvbihhcmdzWzBdPy5jb25maWdGaWxlKTtcblxuICAgICAgICBhd2FpdCBjb25maWd1cmF0aW9uLmluaXQoYXJnc1swXSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBbaG9zdG5hbWUsIHBvcnQxLCBwb3J0Miwgc3NsLCBkZXZlbG9wbWVudE1vZGUsIHJldHJ5VGVzdFBhZ2VzLCBjYWNoZSwgY29uZmlnRmlsZV0gPSBhcmdzO1xuXG4gICAgICAgIGNvbmZpZ3VyYXRpb24gPSBuZXcgVGVzdENhZmVDb25maWd1cmF0aW9uKGNvbmZpZ0ZpbGUpO1xuXG4gICAgICAgIGF3YWl0IGNvbmZpZ3VyYXRpb24uaW5pdCh7XG4gICAgICAgICAgICBob3N0bmFtZSxcbiAgICAgICAgICAgIHBvcnQxLFxuICAgICAgICAgICAgcG9ydDIsXG4gICAgICAgICAgICBzc2wsXG4gICAgICAgICAgICBkZXZlbG9wbWVudE1vZGUsXG4gICAgICAgICAgICByZXRyeVRlc3RQYWdlcyxcbiAgICAgICAgICAgIGNhY2hlXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBjb25maWd1cmF0aW9uO1xufVxuXG4vLyBBUElcbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVRlc3RDYWZlICguLi5hcmdzKSB7XG4gICAgcHJvY2Vzcy50aXRsZSA9IFByb2Nlc3NUaXRsZS5tYWluO1xuXG4gICAgY29uc3QgY29uZmlndXJhdGlvbiA9IGF3YWl0IGdldENvbmZpZ3VyYXRpb24oYXJncyk7XG5cbiAgICBjb25zdCBbaG9zdG5hbWUsIHBvcnQxLCBwb3J0Ml0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIGdldFZhbGlkSG9zdG5hbWUoY29uZmlndXJhdGlvbi5nZXRPcHRpb24oT1BUSU9OX05BTUVTLmhvc3RuYW1lKSksXG4gICAgICAgIGdldFZhbGlkUG9ydChjb25maWd1cmF0aW9uLmdldE9wdGlvbihPUFRJT05fTkFNRVMucG9ydDEpKSxcbiAgICAgICAgZ2V0VmFsaWRQb3J0KGNvbmZpZ3VyYXRpb24uZ2V0T3B0aW9uKE9QVElPTl9OQU1FUy5wb3J0MikpXG4gICAgXSk7XG5cbiAgICBjb25maWd1cmF0aW9uLm1lcmdlT3B0aW9ucyh7IGhvc3RuYW1lLCBwb3J0MSwgcG9ydDIgfSk7XG5cbiAgICBjb25zdCB0ZXN0Y2FmZSA9IG5ldyBUZXN0Q2FmZShjb25maWd1cmF0aW9uKTtcblxuICAgIHNldHVwRXhpdEhvb2soY2IgPT4gdGVzdGNhZmUuY2xvc2UoKS50aGVuKGNiKSk7XG5cbiAgICByZXR1cm4gdGVzdGNhZmU7XG59XG5cbi8vIEVtYmVkZGluZyB1dGlsc1xuY3JlYXRlVGVzdENhZmUuZW1iZWRkaW5nVXRpbHMgPSBlbWJlZGRpbmdVdGlscztcblxuLy8gQ29tbW9uIEFQSVxuT2JqZWN0LmtleXMoZXhwb3J0YWJsZUxpYikuZm9yRWFjaChrZXkgPT4ge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVUZXN0Q2FmZSwga2V5LCB7IGdldDogKCkgPT4gZXhwb3J0YWJsZUxpYltrZXldIH0pO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVRlc3RDYWZlO1xuIl19